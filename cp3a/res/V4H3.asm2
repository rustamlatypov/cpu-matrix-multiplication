
cp.o:	file format Mach-O 64-bit x86-64

Disassembly of section __TEXT,__text:
__Z10preprocessPKfiiiii._omp_fn.1:
; #pragma omp parallel for
       0:	41 57 	pushq	%r15
       2:	41 56 	pushq	%r14
       4:	41 55 	pushq	%r13
       6:	41 54 	pushq	%r12
       8:	55 	pushq	%rbp
       9:	53 	pushq	%rbx
       a:	48 89 fb 	movq	%rdi, %rbx
       d:	48 83 ec 28 	subq	$40, %rsp
      11:	44 8b 6f 08 	movl	8(%rdi), %r13d
      15:	e8 00 00 00 00 	callq	0 <__Z10preprocessPKfiiiii._omp_fn.1+0x1a>
      1a:	89 c5 	movl	%eax, %ebp
      1c:	e8 00 00 00 00 	callq	0 <__Z10preprocessPKfiiiii._omp_fn.1+0x21>
      21:	41 89 c4 	movl	%eax, %r12d
      24:	8b 43 14 	movl	20(%rbx), %eax
      27:	44 29 e8 	subl	%r13d, %eax
      2a:	99 	cltd
      2b:	f7 fd 	idivl	%ebp
      2d:	41 39 d4 	cmpl	%edx, %r12d
      30:	0f 8c af 00 00 00 	jl	175 <__Z10preprocessPKfiiiii._omp_fn.1+0xe5>
      36:	44 0f af e0 	imull	%eax, %r12d
      3a:	41 01 d4 	addl	%edx, %r12d
      3d:	44 01 e0 	addl	%r12d, %eax
      40:	41 39 c4 	cmpl	%eax, %r12d
      43:	0f 8d 8d 00 00 00 	jge	141 <__Z10preprocessPKfiiiii._omp_fn.1+0xd6>
      49:	44 8b 73 10 	movl	16(%rbx), %r14d
      4d:	44 01 e8 	addl	%r13d, %eax
      50:	4c 8b 3b 	movq	(%rbx), %r15
      53:	8b 53 0c 	movl	12(%rbx), %edx
      56:	45 01 ec 	addl	%r13d, %r12d
      59:	89 44 24 0c 	movl	%eax, 12(%rsp)
      5d:	45 85 f6 	testl	%r14d, %r14d
      60:	7e 74 	jle	116 <__Z10preprocessPKfiiiii._omp_fn.1+0xd6>
      62:	85 d2 	testl	%edx, %edx
      64:	7e 70 	jle	112 <__Z10preprocessPKfiiiii._omp_fn.1+0xd6>
; data[na*j + i][k] = 0;
      66:	8d 42 ff 	leal	-1(%rdx), %eax
      69:	48 8d 2c c5 08 00 00 00 	leaq	8(,%rax,8), %rbp
      71:	49 8d 47 20 	leaq	32(%r15), %rax
      75:	45 89 e5 	movl	%r12d, %r13d
      78:	48 89 44 24 18 	movq	%rax, 24(%rsp)
      7d:	41 8d 46 ff 	leal	-1(%r14), %eax
      81:	45 0f af ee 	imull	%r14d, %r13d
      85:	48 89 44 24 10 	movq	%rax, 16(%rsp)
      8a:	66 0f 1f 44 00 00 	nopw	(%rax,%rax)
; for (int j = ny; j < ncd; j++) {
      90:	48 8b 74 24 10 	movq	16(%rsp), %rsi
; for (int i = 0; i < na; i++) {
      95:	49 63 c5 	movslq	%r13d, %rax
      98:	48 89 c1 	movq	%rax, %rcx
      9b:	48 8d 1c 06 	leaq	(%rsi,%rax), %rbx
      9f:	48 c1 e1 05 	shlq	$5, %rcx
      a3:	48 c1 e3 05 	shlq	$5, %rbx
      a7:	4c 01 f9 	addq	%r15, %rcx
      aa:	48 03 5c 24 18 	addq	24(%rsp), %rbx
      af:	90 	nop
      b0:	48 89 cf 	movq	%rcx, %rdi
      b3:	48 89 ea 	movq	%rbp, %rdx
      b6:	31 f6 	xorl	%esi, %esi
      b8:	e8 00 00 00 00 	callq	0 <__Z10preprocessPKfiiiii._omp_fn.1+0xbd>
      bd:	48 89 c1 	movq	%rax, %rcx
      c0:	48 83 c1 20 	addq	$32, %rcx
      c4:	48 39 d9 	cmpq	%rbx, %rcx
      c7:	75 e7 	jne	-25 <__Z10preprocessPKfiiiii._omp_fn.1+0xb0>
      c9:	41 ff c4 	incl	%r12d
      cc:	45 01 f5 	addl	%r14d, %r13d
      cf:	44 39 64 24 0c 	cmpl	%r12d, 12(%rsp)
      d4:	7f ba 	jg	-70 <__Z10preprocessPKfiiiii._omp_fn.1+0x90>
; #pragma omp parallel for
      d6:	48 83 c4 28 	addq	$40, %rsp
      da:	5b 	popq	%rbx
      db:	5d 	popq	%rbp
      dc:	41 5c 	popq	%r12
      de:	41 5d 	popq	%r13
      e0:	41 5e 	popq	%r14
      e2:	41 5f 	popq	%r15
      e4:	c3 	retq
      e5:	ff c0 	incl	%eax
      e7:	31 d2 	xorl	%edx, %edx
      e9:	e9 48 ff ff ff 	jmp	-184 <__Z10preprocessPKfiiiii._omp_fn.1+0x36>
      ee:	66 90 	nop

__Z10preprocessPKfiiiii._omp_fn.0:
; #pragma omp parallel for
      f0:	41 57 	pushq	%r15
      f2:	41 56 	pushq	%r14
      f4:	41 55 	pushq	%r13
      f6:	41 54 	pushq	%r12
      f8:	49 89 fc 	movq	%rdi, %r12
      fb:	55 	pushq	%rbp
      fc:	53 	pushq	%rbx
      fd:	48 83 ec 18 	subq	$24, %rsp
     101:	e8 00 00 00 00 	callq	0 <__Z10preprocessPKfiiiii._omp_fn.0+0x16>
     106:	89 c5 	movl	%eax, %ebp
     108:	e8 00 00 00 00 	callq	0 <__Z10preprocessPKfiiiii._omp_fn.0+0x1d>
     10d:	89 c3 	movl	%eax, %ebx
     10f:	41 8b 44 24 10 	movl	16(%r12), %eax
     114:	99 	cltd
     115:	f7 fd 	idivl	%ebp
     117:	39 d3 	cmpl	%edx, %ebx
     119:	0f 8c f3 01 00 00 	jl	499 <__Z10preprocessPKfiiiii._omp_fn.0+0x222>
     11f:	0f af d8 	imull	%eax, %ebx
     122:	01 d3 	addl	%edx, %ebx
     124:	8d 2c 18 	leal	(%rax,%rbx), %ebp
     127:	39 eb 	cmpl	%ebp, %ebx
     129:	0f 8d a2 01 00 00 	jge	418 <__Z10preprocessPKfiiiii._omp_fn.0+0x1e1>
     12f:	45 8b 74 24 1c 	movl	28(%r12), %r14d
     134:	4d 8b 7c 24 08 	movq	8(%r12), %r15
     139:	41 8b 4c 24 18 	movl	24(%r12), %ecx
     13e:	41 8b 74 24 14 	movl	20(%r12), %esi
     143:	4d 8b 0c 24 	movq	(%r12), %r9
     147:	45 85 f6 	testl	%r14d, %r14d
     14a:	0f 8e 81 01 00 00 	jle	385 <__Z10preprocessPKfiiiii._omp_fn.0+0x1e1>
     150:	85 c9 	testl	%ecx, %ecx
     152:	0f 8e 79 01 00 00 	jle	377 <__Z10preprocessPKfiiiii._omp_fn.0+0x1e1>
     158:	49 8d 47 20 	leaq	32(%r15), %rax
     15c:	45 89 f5 	movl	%r14d, %r13d
     15f:	41 89 dc 	movl	%ebx, %r12d
     162:	48 89 44 24 08 	movq	%rax, 8(%rsp)
     167:	41 8d 46 ff 	leal	-1(%r14), %eax
     16b:	44 0f af eb 	imull	%ebx, %r13d
     16f:	44 0f af e6 	imull	%esi, %r12d
     173:	48 89 04 24 	movq	%rax, (%rsp)
; data[na*j + i][k] = pos < nx ? data_[nx*j + pos] : 0;
     177:	c5 f1 57 c9 	vxorpd	%xmm1, %xmm1, %xmm1
     17b:	c5 e9 57 d2 	vxorpd	%xmm2, %xmm2, %xmm2
     17f:	c5 e1 57 db 	vxorpd	%xmm3, %xmm3, %xmm3
     183:	c5 d9 57 e4 	vxorpd	%xmm4, %xmm4, %xmm4
     187:	c5 d1 57 ed 	vxorpd	%xmm5, %xmm5, %xmm5
     18b:	0f 1f 44 00 00 	nopl	(%rax,%rax)
; for (int j = 0; j < ny; j++) {
     190:	48 8b 3c 24 	movq	(%rsp), %rdi
; for (int i = 0; i < na; i++) {
     194:	49 63 d5 	movslq	%r13d, %rdx
     197:	4c 8d 14 17 	leaq	(%rdi,%rdx), %r10
     19b:	48 89 d0 	movq	%rdx, %rax
     19e:	48 c1 e0 05 	shlq	$5, %rax
     1a2:	49 c1 e2 05 	shlq	$5, %r10
     1a6:	4c 01 f8 	addq	%r15, %rax
     1a9:	4c 03 54 24 08 	addq	8(%rsp), %r10
; #pragma omp parallel for
     1ae:	44 89 e7 	movl	%r12d, %edi
     1b1:	31 d2 	xorl	%edx, %edx
     1b3:	66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
     1bd:	0f 1f 00 	nopl	(%rax)
; int pos = i * nb + k;
     1c0:	c5 f9 28 c1 	vmovapd	%xmm1, %xmm0
; data[na*j + i][k] = pos < nx ? data_[nx*j + pos] : 0;
     1c4:	39 d6 	cmpl	%edx, %esi
     1c6:	7e 0d 	jle	13 <__Z10preprocessPKfiiiii._omp_fn.0+0xe5>
     1c8:	4c 63 c7 	movslq	%edi, %r8
     1cb:	c5 f9 57 c0 	vxorpd	%xmm0, %xmm0, %xmm0
     1cf:	c4 81 7a 5a 04 81 	vcvtss2sd	(%r9,%r8,4), %xmm0, %xmm0
     1d5:	c5 fb 11 00 	vmovsd	%xmm0, (%rax)
; for (int k = 0; k < nb; k++) {
     1d9:	83 f9 01 	cmpl	$1, %ecx
     1dc:	0f 84 ce 00 00 00 	je	206 <__Z10preprocessPKfiiiii._omp_fn.0+0x1c0>
; int pos = i * nb + k;
     1e2:	44 8d 42 01 	leal	1(%rdx), %r8d
; data[na*j + i][k] = pos < nx ? data_[nx*j + pos] : 0;
     1e6:	c5 f9 28 c2 	vmovapd	%xmm2, %xmm0
     1ea:	44 39 c6 	cmpl	%r8d, %esi
     1ed:	7e 11 	jle	17 <__Z10preprocessPKfiiiii._omp_fn.0+0x110>
     1ef:	44 8d 47 01 	leal	1(%rdi), %r8d
     1f3:	4d 63 c0 	movslq	%r8d, %r8
     1f6:	c5 f9 57 c0 	vxorpd	%xmm0, %xmm0, %xmm0
     1fa:	c4 81 7a 5a 04 81 	vcvtss2sd	(%r9,%r8,4), %xmm0, %xmm0
     200:	c5 fb 11 40 08 	vmovsd	%xmm0, 8(%rax)
; for (int k = 0; k < nb; k++) {
     205:	83 f9 02 	cmpl	$2, %ecx
     208:	0f 84 a2 00 00 00 	je	162 <__Z10preprocessPKfiiiii._omp_fn.0+0x1c0>
; int pos = i * nb + k;
     20e:	44 8d 42 02 	leal	2(%rdx), %r8d
; data[na*j + i][k] = pos < nx ? data_[nx*j + pos] : 0;
     212:	c5 f9 28 c3 	vmovapd	%xmm3, %xmm0
     216:	44 39 c6 	cmpl	%r8d, %esi
     219:	7e 11 	jle	17 <__Z10preprocessPKfiiiii._omp_fn.0+0x13c>
     21b:	44 8d 47 02 	leal	2(%rdi), %r8d
     21f:	4d 63 c0 	movslq	%r8d, %r8
     222:	c5 f9 57 c0 	vxorpd	%xmm0, %xmm0, %xmm0
     226:	c4 81 7a 5a 04 81 	vcvtss2sd	(%r9,%r8,4), %xmm0, %xmm0
     22c:	c5 fb 11 40 10 	vmovsd	%xmm0, 16(%rax)
; for (int k = 0; k < nb; k++) {
     231:	83 f9 03 	cmpl	$3, %ecx
     234:	74 7a 	je	122 <__Z10preprocessPKfiiiii._omp_fn.0+0x1c0>
; int pos = i * nb + k;
     236:	44 8d 42 03 	leal	3(%rdx), %r8d
; data[na*j + i][k] = pos < nx ? data_[nx*j + pos] : 0;
     23a:	c5 f9 28 c4 	vmovapd	%xmm4, %xmm0
     23e:	44 39 c6 	cmpl	%r8d, %esi
     241:	7e 11 	jle	17 <__Z10preprocessPKfiiiii._omp_fn.0+0x164>
     243:	44 8d 47 03 	leal	3(%rdi), %r8d
     247:	4d 63 c0 	movslq	%r8d, %r8
     24a:	c5 f9 57 c0 	vxorpd	%xmm0, %xmm0, %xmm0
     24e:	c4 81 7a 5a 04 81 	vcvtss2sd	(%r9,%r8,4), %xmm0, %xmm0
     254:	c5 fb 11 40 18 	vmovsd	%xmm0, 24(%rax)
; for (int k = 0; k < nb; k++) {
     259:	83 f9 04 	cmpl	$4, %ecx
     25c:	74 52 	je	82 <__Z10preprocessPKfiiiii._omp_fn.0+0x1c0>
; int pos = i * nb + k;
     25e:	44 8d 42 04 	leal	4(%rdx), %r8d
; data[na*j + i][k] = pos < nx ? data_[nx*j + pos] : 0;
     262:	c5 f9 28 c5 	vmovapd	%xmm5, %xmm0
     266:	44 39 c6 	cmpl	%r8d, %esi
     269:	7e 11 	jle	17 <__Z10preprocessPKfiiiii._omp_fn.0+0x18c>
     26b:	44 8d 47 04 	leal	4(%rdi), %r8d
     26f:	4d 63 c0 	movslq	%r8d, %r8
     272:	c5 f9 57 c0 	vxorpd	%xmm0, %xmm0, %xmm0
     276:	c4 81 7a 5a 04 81 	vcvtss2sd	(%r9,%r8,4), %xmm0, %xmm0
     27c:	c5 fb 11 40 20 	vmovsd	%xmm0, 32(%rax)
; for (int k = 0; k < nb; k++) {
     281:	83 f9 05 	cmpl	$5, %ecx
     284:	74 2a 	je	42 <__Z10preprocessPKfiiiii._omp_fn.0+0x1c0>
     286:	41 b8 05 00 00 00 	movl	$5, %r8d
; int pos = i * nb + k;
     28c:	46 8d 1c 02 	leal	(%rdx,%r8), %r11d
; data[na*j + i][k] = pos < nx ? data_[nx*j + pos] : 0;
     290:	44 39 de 	cmpl	%r11d, %esi
     293:	7f 4b 	jg	75 <__Z10preprocessPKfiiiii._omp_fn.0+0x1f0>
     295:	4a c7 04 c0 00 00 00 00 	movq	$0, (%rax,%r8,8)
     29d:	49 ff c0 	incq	%r8
; for (int k = 0; k < nb; k++) {
     2a0:	44 39 c1 	cmpl	%r8d, %ecx
     2a3:	7f e7 	jg	-25 <__Z10preprocessPKfiiiii._omp_fn.0+0x19c>
     2a5:	66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
     2af:	90 	nop
     2b0:	48 83 c0 20 	addq	$32, %rax
     2b4:	01 ca 	addl	%ecx, %edx
     2b6:	01 cf 	addl	%ecx, %edi
; for (int i = 0; i < na; i++) {
     2b8:	4c 39 d0 	cmpq	%r10, %rax
     2bb:	0f 85 ff fe ff ff 	jne	-257 <__Z10preprocessPKfiiiii._omp_fn.0+0xd0>
     2c1:	ff c3 	incl	%ebx
     2c3:	45 01 f5 	addl	%r14d, %r13d
     2c6:	41 01 f4 	addl	%esi, %r12d
     2c9:	39 dd 	cmpl	%ebx, %ebp
     2cb:	0f 85 bf fe ff ff 	jne	-321 <__Z10preprocessPKfiiiii._omp_fn.0+0xa0>
; #pragma omp parallel for
     2d1:	48 83 c4 18 	addq	$24, %rsp
     2d5:	5b 	popq	%rbx
     2d6:	5d 	popq	%rbp
     2d7:	41 5c 	popq	%r12
     2d9:	41 5d 	popq	%r13
     2db:	41 5e 	popq	%r14
     2dd:	41 5f 	popq	%r15
     2df:	c3 	retq
; data[na*j + i][k] = pos < nx ? data_[nx*j + pos] : 0;
     2e0:	46 8d 1c 07 	leal	(%rdi,%r8), %r11d
     2e4:	4d 63 db 	movslq	%r11d, %r11
     2e7:	c5 f9 57 c0 	vxorpd	%xmm0, %xmm0, %xmm0
     2eb:	c4 81 7a 5a 04 99 	vcvtss2sd	(%r9,%r11,4), %xmm0, %xmm0
     2f1:	c4 a1 7b 11 04 c0 	vmovsd	%xmm0, (%rax,%r8,8)
     2f7:	49 ff c0 	incq	%r8
; for (int k = 0; k < nb; k++) {
     2fa:	44 39 c1 	cmpl	%r8d, %ecx
     2fd:	7f 8d 	jg	-115 <__Z10preprocessPKfiiiii._omp_fn.0+0x19c>
     2ff:	48 83 c0 20 	addq	$32, %rax
     303:	01 ca 	addl	%ecx, %edx
     305:	01 cf 	addl	%ecx, %edi
; for (int i = 0; i < na; i++) {
     307:	4c 39 d0 	cmpq	%r10, %rax
     30a:	0f 85 b0 fe ff ff 	jne	-336 <__Z10preprocessPKfiiiii._omp_fn.0+0xd0>
     310:	eb af 	jmp	-81 <__Z10preprocessPKfiiiii._omp_fn.0+0x1d1>
     312:	ff c0 	incl	%eax
; #pragma omp parallel for
     314:	31 d2 	xorl	%edx, %edx
     316:	e9 04 fe ff ff 	jmp	-508 <__Z10preprocessPKfiiiii._omp_fn.0+0x2f>
     31b:	0f 1f 44 00 00 	nopl	(%rax,%rax)

__Z10preprocessPKfiiiii._omp_fn.2:
; #pragma omp parallel for
     320:	4c 8d 54 24 08 	leaq	8(%rsp), %r10
     325:	48 83 e4 e0 	andq	$-32, %rsp
     329:	41 ff 72 f8 	pushq	-8(%r10)
     32d:	55 	pushq	%rbp
     32e:	48 89 e5 	movq	%rsp, %rbp
     331:	41 57 	pushq	%r15
     333:	41 56 	pushq	%r14
     335:	41 55 	pushq	%r13
     337:	41 54 	pushq	%r12
     339:	41 52 	pushq	%r10
     33b:	53 	pushq	%rbx
     33c:	48 89 fb 	movq	%rdi, %rbx
     33f:	48 83 c4 80 	addq	$-128, %rsp
     343:	e8 00 00 00 00 	callq	0 <__Z10preprocessPKfiiiii._omp_fn.2+0x28>
     348:	41 89 c4 	movl	%eax, %r12d
     34b:	e8 00 00 00 00 	callq	0 <__Z10preprocessPKfiiiii._omp_fn.2+0x30>
     350:	89 c6 	movl	%eax, %esi
     352:	8b 43 08 	movl	8(%rbx), %eax
     355:	99 	cltd
     356:	41 f7 fc 	idivl	%r12d
     359:	39 d6 	cmpl	%edx, %esi
     35b:	0f 8c 28 03 00 00 	jl	808 <__Z10preprocessPKfiiiii._omp_fn.2+0x369>
     361:	0f af f0 	imull	%eax, %esi
     364:	01 d6 	addl	%edx, %esi
     366:	44 8d 04 30 	leal	(%rax,%rsi), %r8d
     36a:	44 39 c6 	cmpl	%r8d, %esi
     36d:	0f 8d aa 02 00 00 	jge	682 <__Z10preprocessPKfiiiii._omp_fn.2+0x2fd>
     373:	4c 63 7b 14 	movslq	20(%rbx), %r15
     377:	44 8b 4b 0c 	movl	12(%rbx), %r9d
     37b:	4c 89 f8 	movq	%r15, %rax
     37e:	44 8b 6b 10 	movl	16(%rbx), %r13d
     382:	c5 d9 57 e4 	vxorpd	%xmm4, %xmm4, %xmm4
     386:	48 8b 13 	movq	(%rbx), %rdx
; int lim = nb - (na*nb-nx);
     389:	44 89 f9 	movl	%r15d, %ecx
     38c:	44 89 cb 	movl	%r9d, %ebx
     38f:	c4 c1 5b 2a e1 	vcvtsi2sdl	%r9d, %xmm4, %xmm4
     394:	41 89 c1 	movl	%eax, %r9d
     397:	41 0f af cd 	imull	%r13d, %ecx
     39b:	44 0f af ce 	imull	%esi, %r9d
; for (int i = 0; i < na-1; i++) {
     39f:	41 8d 7f ff 	leal	-1(%r15), %edi
; int lim = nb - (na*nb-nx);
     3a3:	29 cb 	subl	%ecx, %ebx
     3a5:	4d 63 c9 	movslq	%r9d, %r9
     3a8:	89 d9 	movl	%ebx, %ecx
     3aa:	4d 89 ce 	movq	%r9, %r14
     3ad:	89 fb 	movl	%edi, %ebx
     3af:	44 8d 60 fe 	leal	-2(%rax), %r12d
     3b3:	49 c1 e6 05 	shlq	$5, %r14
     3b7:	4c 01 cb 	addq	%r9, %rbx
     3ba:	4d 01 cc 	addq	%r9, %r12
     3bd:	49 01 d6 	addq	%rdx, %r14
     3c0:	48 c1 e3 05 	shlq	$5, %rbx
     3c4:	48 83 c2 20 	addq	$32, %rdx
     3c8:	49 c1 e4 05 	shlq	$5, %r12
     3cc:	44 01 e9 	addl	%r13d, %ecx
     3cf:	49 c1 e7 05 	shlq	$5, %r15
     3d3:	48 01 d3 	addq	%rdx, %rbx
     3d6:	49 01 d4 	addq	%rdx, %r12
     3d9:	c5 e1 57 db 	vxorpd	%xmm3, %xmm3, %xmm3
; double4_t avg_v = double4_0;
     3dd:	c5 e9 57 d2 	vxorpd	%xmm2, %xmm2, %xmm2
     3e1:	66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
     3eb:	0f 1f 44 00 00 	nopl	(%rax,%rax)
; for (int j = 0; j < ny; j++) {
     3f0:	4c 89 f2 	movq	%r14, %rdx
; for (int i = 0; i < na; i++) {
     3f3:	c5 f9 57 c0 	vxorpd	%xmm0, %xmm0, %xmm0
     3f7:	85 c0 	testl	%eax, %eax
     3f9:	0f 8e 81 02 00 00 	jle	641 <__Z10preprocessPKfiiiii._omp_fn.2+0x360>
     3ff:	90 	nop
; sum4 += data[j*na+i];
     400:	c5 fd 58 02 	vaddpd	(%rdx), %ymm0, %ymm0
     404:	48 83 c2 20 	addq	$32, %rdx
; for (int i = 0; i < na; i++) {
     408:	48 39 d3 	cmpq	%rdx, %rbx
     40b:	75 f3 	jne	-13 <__Z10preprocessPKfiiiii._omp_fn.2+0xe0>
     40d:	c5 fb 58 cb 	vaddsd	%xmm3, %xmm0, %xmm1
     411:	c5 f9 15 e8 	vunpckhpd	%xmm0, %xmm0, %xmm5
     415:	c4 e3 7d 19 c0 01 	vextractf128	$1, %ymm0, %xmm0
     41b:	c5 f3 58 cd 	vaddsd	%xmm5, %xmm1, %xmm1
     41f:	c5 f3 58 c8 	vaddsd	%xmm0, %xmm1, %xmm1
     423:	c5 f9 15 c0 	vunpckhpd	%xmm0, %xmm0, %xmm0
     427:	c5 f3 58 c0 	vaddsd	%xmm0, %xmm1, %xmm0
; double sum = hsum(sum4);
     42b:	c5 fb 5e cc 	vdivsd	%xmm4, %xmm0, %xmm1
; double4_t avg_v = double4_0;
     42f:	c5 fd 29 55 b0 	vmovapd	%ymm2, -80(%rbp)
; for (int k = 0; k < nb; k++) {
     434:	45 85 ed 	testl	%r13d, %r13d
     437:	7e 57 	jle	87 <__Z10preprocessPKfiiiii._omp_fn.2+0x170>
; avg_v[k] = avg;
     439:	c5 fb 11 4d b0 	vmovsd	%xmm1, -80(%rbp)
; for (int k = 0; k < nb; k++) {
     43e:	41 83 fd 01 	cmpl	$1, %r13d
     442:	74 4c 	je	76 <__Z10preprocessPKfiiiii._omp_fn.2+0x170>
; avg_v[k] = avg;
     444:	c5 fb 11 4d b8 	vmovsd	%xmm1, -72(%rbp)
; for (int k = 0; k < nb; k++) {
     449:	41 83 fd 02 	cmpl	$2, %r13d
     44d:	74 41 	je	65 <__Z10preprocessPKfiiiii._omp_fn.2+0x170>
; avg_v[k] = avg;
     44f:	c5 fb 11 4d c0 	vmovsd	%xmm1, -64(%rbp)
; for (int k = 0; k < nb; k++) {
     454:	41 83 fd 03 	cmpl	$3, %r13d
     458:	74 36 	je	54 <__Z10preprocessPKfiiiii._omp_fn.2+0x170>
; avg_v[k] = avg;
     45a:	c5 fb 11 4d c8 	vmovsd	%xmm1, -56(%rbp)
; for (int k = 0; k < nb; k++) {
     45f:	41 83 fd 04 	cmpl	$4, %r13d
     463:	74 2b 	je	43 <__Z10preprocessPKfiiiii._omp_fn.2+0x170>
; avg_v[k] = avg;
     465:	c5 fb 11 4d d0 	vmovsd	%xmm1, -48(%rbp)
; for (int k = 0; k < nb; k++) {
     46a:	41 83 fd 05 	cmpl	$5, %r13d
     46e:	74 20 	je	32 <__Z10preprocessPKfiiiii._omp_fn.2+0x170>
     470:	ba 05 00 00 00 	movl	$5, %edx
     475:	4c 8d 4d b0 	leaq	-80(%rbp), %r9
; avg_v[k] = avg;
     479:	c4 c1 7b 11 0c d1 	vmovsd	%xmm1, (%r9,%rdx,8)
     47f:	48 ff c2 	incq	%rdx
; for (int k = 0; k < nb; k++) {
     482:	41 39 d5 	cmpl	%edx, %r13d
     485:	7f f2 	jg	-14 <__Z10preprocessPKfiiiii._omp_fn.2+0x159>
     487:	66 0f 1f 84 00 00 00 00 00 	nopw	(%rax,%rax)
; for (int i = 0; i < na-1; i++) {
     490:	85 ff 	testl	%edi, %edi
     492:	7e 22 	jle	34 <__Z10preprocessPKfiiiii._omp_fn.2+0x196>
; data[j*na+i] -= avg_v;
     494:	c5 fd 28 6d b0 	vmovapd	-80(%rbp), %ymm5
     499:	4c 89 f2 	movq	%r14, %rdx
     49c:	0f 1f 40 00 	nopl	(%rax)
     4a0:	c5 fd 28 3a 	vmovapd	(%rdx), %ymm7
     4a4:	48 83 c2 20 	addq	$32, %rdx
     4a8:	c5 c5 5c c5 	vsubpd	%ymm5, %ymm7, %ymm0
     4ac:	c5 fd 29 42 e0 	vmovapd	%ymm0, -32(%rdx)
; for (int i = 0; i < na-1; i++) {
     4b1:	4c 39 e2 	cmpq	%r12, %rdx
     4b4:	75 ea 	jne	-22 <__Z10preprocessPKfiiiii._omp_fn.2+0x180>
; avg_v = double4_0;
     4b6:	c5 fd 29 55 b0 	vmovapd	%ymm2, -80(%rbp)
; int lim = nb - (na*nb-nx);
     4bb:	85 c9 	testl	%ecx, %ecx
; for (int k = 0; k < lim; k++) avg_v[k] = avg;
     4bd:	0f 8e 7d 01 00 00 	jle	381 <__Z10preprocessPKfiiiii._omp_fn.2+0x320>
     4c3:	c5 fb 11 4d b0 	vmovsd	%xmm1, -80(%rbp)
     4c8:	83 f9 01 	cmpl	$1, %ecx
     4cb:	74 43 	je	67 <__Z10preprocessPKfiiiii._omp_fn.2+0x1f0>
     4cd:	c5 fb 11 4d b8 	vmovsd	%xmm1, -72(%rbp)
     4d2:	83 f9 02 	cmpl	$2, %ecx
     4d5:	74 39 	je	57 <__Z10preprocessPKfiiiii._omp_fn.2+0x1f0>
     4d7:	c5 fb 11 4d c0 	vmovsd	%xmm1, -64(%rbp)
     4dc:	83 f9 03 	cmpl	$3, %ecx
     4df:	74 2f 	je	47 <__Z10preprocessPKfiiiii._omp_fn.2+0x1f0>
     4e1:	c5 fb 11 4d c8 	vmovsd	%xmm1, -56(%rbp)
     4e6:	83 f9 04 	cmpl	$4, %ecx
     4e9:	74 25 	je	37 <__Z10preprocessPKfiiiii._omp_fn.2+0x1f0>
     4eb:	c5 fb 11 4d d0 	vmovsd	%xmm1, -48(%rbp)
     4f0:	83 f9 05 	cmpl	$5, %ecx
     4f3:	74 1b 	je	27 <__Z10preprocessPKfiiiii._omp_fn.2+0x1f0>
     4f5:	ba 05 00 00 00 	movl	$5, %edx
     4fa:	4c 8d 4d b0 	leaq	-80(%rbp), %r9
     4fe:	c4 c1 7b 11 0c d1 	vmovsd	%xmm1, (%r9,%rdx,8)
     504:	48 ff c2 	incq	%rdx
     507:	39 d1 	cmpl	%edx, %ecx
     509:	7f f3 	jg	-13 <__Z10preprocessPKfiiiii._omp_fn.2+0x1de>
     50b:	0f 1f 44 00 00 	nopl	(%rax,%rax)
     510:	c5 fd 28 45 b0 	vmovapd	-80(%rbp), %ymm0
; data[j*na + na-1] -= avg_v;
     515:	c4 81 7d 28 74 3e e0 	vmovapd	-32(%r14,%r15), %ymm6
     51c:	c5 cd 5c c0 	vsubpd	%ymm0, %ymm6, %ymm0
     520:	c4 81 7d 29 44 3e e0 	vmovapd	%ymm0, -32(%r14,%r15)
; sum4 = double4_0;
     527:	85 c0 	testl	%eax, %eax
; for (int i = 0; i < na; i++) {
     529:	0f 8e 21 01 00 00 	jle	289 <__Z10preprocessPKfiiiii._omp_fn.2+0x330>
     52f:	4c 89 f2 	movq	%r14, %rdx
     532:	c5 f9 57 c0 	vxorpd	%xmm0, %xmm0, %xmm0
     536:	66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
; double4_t e_v = data[j*na+i];
     540:	c5 fd 28 0a 	vmovapd	(%rdx), %ymm1
; sum4 += e_v * e_v;
     544:	48 83 c2 20 	addq	$32, %rdx
     548:	c4 e2 f5 b8 c1 	vfmadd231pd	%ymm1, %ymm1, %ymm0
; for (int i = 0; i < na; i++) {
     54d:	48 39 d3 	cmpq	%rdx, %rbx
     550:	75 ee 	jne	-18 <__Z10preprocessPKfiiiii._omp_fn.2+0x220>
; sum = hsum(sum4);
     552:	c5 fb 58 eb 	vaddsd	%xmm3, %xmm0, %xmm5
; for (int i = 0; i < 4; i++) sum += sum_v[i];
     556:	c5 f9 15 c8 	vunpckhpd	%xmm0, %xmm0, %xmm1
     55a:	c4 e3 7d 19 c0 01 	vextractf128	$1, %ymm0, %xmm0
     560:	c5 f3 58 cd 	vaddsd	%xmm5, %xmm1, %xmm1
     564:	c5 fb 58 c9 	vaddsd	%xmm1, %xmm0, %xmm1
     568:	c5 f9 15 c0 	vunpckhpd	%xmm0, %xmm0, %xmm0
     56c:	c5 fb 58 c1 	vaddsd	%xmm1, %xmm0, %xmm0
; return sum;
     570:	c5 f9 2e d8 	vucomisd	%xmm0, %xmm3
; sum = sqrt(sum);
     574:	c5 f3 51 c8 	vsqrtsd	%xmm0, %xmm1, %xmm1
     578:	0f 87 14 01 00 00 	ja	276 <__Z10preprocessPKfiiiii._omp_fn.2+0x372>
; sum4 = double4_0;
     57e:	c5 fd 29 55 90 	vmovapd	%ymm2, -112(%rbp)
; for (int k = 0; k < nb; k++) sum4[k] = sum;
     583:	45 85 ed 	testl	%r13d, %r13d
     586:	7e 52 	jle	82 <__Z10preprocessPKfiiiii._omp_fn.2+0x2ba>
     588:	c5 fb 11 4d 90 	vmovsd	%xmm1, -112(%rbp)
     58d:	41 83 fd 01 	cmpl	$1, %r13d
     591:	74 47 	je	71 <__Z10preprocessPKfiiiii._omp_fn.2+0x2ba>
     593:	c5 fb 11 4d 98 	vmovsd	%xmm1, -104(%rbp)
     598:	41 83 fd 02 	cmpl	$2, %r13d
     59c:	74 38 	je	56 <__Z10preprocessPKfiiiii._omp_fn.2+0x2b6>
     59e:	c5 fb 11 4d a0 	vmovsd	%xmm1, -96(%rbp)
     5a3:	41 83 fd 03 	cmpl	$3, %r13d
     5a7:	74 2d 	je	45 <__Z10preprocessPKfiiiii._omp_fn.2+0x2b6>
     5a9:	c5 fb 11 4d a8 	vmovsd	%xmm1, -88(%rbp)
     5ae:	41 83 fd 04 	cmpl	$4, %r13d
     5b2:	74 22 	je	34 <__Z10preprocessPKfiiiii._omp_fn.2+0x2b6>
     5b4:	c5 fb 11 4d b0 	vmovsd	%xmm1, -80(%rbp)
     5b9:	41 83 fd 05 	cmpl	$5, %r13d
     5bd:	74 17 	je	23 <__Z10preprocessPKfiiiii._omp_fn.2+0x2b6>
     5bf:	ba 05 00 00 00 	movl	$5, %edx
     5c4:	4c 8d 4d 90 	leaq	-112(%rbp), %r9
     5c8:	c4 c1 7b 11 0c d1 	vmovsd	%xmm1, (%r9,%rdx,8)
     5ce:	48 ff c2 	incq	%rdx
     5d1:	41 39 d5 	cmpl	%edx, %r13d
     5d4:	7f f2 	jg	-14 <__Z10preprocessPKfiiiii._omp_fn.2+0x2a8>
; for (int i = 0; i < na; i++) {
     5d6:	85 c0 	testl	%eax, %eax
     5d8:	7e 2c 	jle	44 <__Z10preprocessPKfiiiii._omp_fn.2+0x2e6>
; data[j*na+i] /= sum4;
     5da:	c5 fd 28 4d 90 	vmovapd	-112(%rbp), %ymm1
     5df:	4c 89 f2 	movq	%r14, %rdx
     5e2:	66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
     5ec:	0f 1f 40 00 	nopl	(%rax)
     5f0:	c5 fd 28 32 	vmovapd	(%rdx), %ymm6
     5f4:	48 83 c2 20 	addq	$32, %rdx
     5f8:	c5 cd 5e c1 	vdivpd	%ymm1, %ymm6, %ymm0
     5fc:	c5 fd 29 42 e0 	vmovapd	%ymm0, -32(%rdx)
; for (int i = 0; i < na; i++) {
     601:	48 39 d3 	cmpq	%rdx, %rbx
     604:	75 ea 	jne	-22 <__Z10preprocessPKfiiiii._omp_fn.2+0x2d0>
     606:	ff c6 	incl	%esi
     608:	4d 01 fe 	addq	%r15, %r14
     60b:	4c 01 fb 	addq	%r15, %rbx
     60e:	4d 01 fc 	addq	%r15, %r12
     611:	41 39 f0 	cmpl	%esi, %r8d
     614:	0f 85 d6 fd ff ff 	jne	-554 <__Z10preprocessPKfiiiii._omp_fn.2+0xd0>
     61a:	c5 f8 77 	vzeroupper
; #pragma omp parallel for
     61d:	48 83 ec 80 	subq	$-128, %rsp
     621:	5b 	popq	%rbx
     622:	41 5a 	popq	%r10
     624:	41 5c 	popq	%r12
     626:	41 5d 	popq	%r13
     628:	41 5e 	popq	%r14
     62a:	41 5f 	popq	%r15
     62c:	5d 	popq	%rbp
     62d:	49 8d 62 f8 	leaq	-8(%r10), %rsp
     631:	c3 	retq
     632:	66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
     63c:	0f 1f 40 00 	nopl	(%rax)
; for (int k = 0; k < lim; k++) avg_v[k] = avg;
     640:	c5 f9 57 c0 	vxorpd	%xmm0, %xmm0, %xmm0
     644:	e9 cc fe ff ff 	jmp	-308 <__Z10preprocessPKfiiiii._omp_fn.2+0x1f5>
     649:	0f 1f 80 00 00 00 00 	nopl	(%rax)
; sum4 = double4_0;
     650:	c5 fd 29 55 90 	vmovapd	%ymm2, -112(%rbp)
; for (int k = 0; k < nb; k++) sum4[k] = sum;
     655:	45 85 ed 	testl	%r13d, %r13d
     658:	7e ac 	jle	-84 <__Z10preprocessPKfiiiii._omp_fn.2+0x2e6>
     65a:	48 c7 45 90 00 00 00 00 	movq	$0, -112(%rbp)
     662:	41 83 fd 01 	cmpl	$1, %r13d
     666:	74 9e 	je	-98 <__Z10preprocessPKfiiiii._omp_fn.2+0x2e6>
; sum = sqrt(sum);
     668:	c5 f1 57 c9 	vxorpd	%xmm1, %xmm1, %xmm1
     66c:	e9 22 ff ff ff 	jmp	-222 <__Z10preprocessPKfiiiii._omp_fn.2+0x273>
     671:	66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
     67b:	0f 1f 44 00 00 	nopl	(%rax,%rax)
; for (int i = 0; i < na; i++) {
     680:	c5 f9 57 c0 	vxorpd	%xmm0, %xmm0, %xmm0
     684:	e9 a2 fd ff ff 	jmp	-606 <__Z10preprocessPKfiiiii._omp_fn.2+0x10b>
     689:	ff c0 	incl	%eax
; #pragma omp parallel for
     68b:	31 d2 	xorl	%edx, %edx
     68d:	e9 cf fc ff ff 	jmp	-817 <__Z10preprocessPKfiiiii._omp_fn.2+0x41>
     692:	c5 fb 11 a5 68 ff ff ff 	vmovsd	%xmm4, -152(%rbp)
     69a:	89 bd 74 ff ff ff 	movl	%edi, -140(%rbp)
     6a0:	c5 fb 11 8d 78 ff ff ff 	vmovsd	%xmm1, -136(%rbp)
     6a8:	89 4d 80 	movl	%ecx, -128(%rbp)
     6ab:	44 89 45 84 	movl	%r8d, -124(%rbp)
     6af:	89 45 88 	movl	%eax, -120(%rbp)
     6b2:	89 75 8c 	movl	%esi, -116(%rbp)
; sum = sqrt(sum);
     6b5:	c5 f8 77 	vzeroupper
     6b8:	e8 00 00 00 00 	callq	0 <__Z10preprocessPKfiiiii._omp_fn.2+0x39d>
     6bd:	8b 75 8c 	movl	-116(%rbp), %esi
     6c0:	8b 45 88 	movl	-120(%rbp), %eax
     6c3:	44 8b 45 84 	movl	-124(%rbp), %r8d
     6c7:	8b 4d 80 	movl	-128(%rbp), %ecx
     6ca:	c5 fb 10 8d 78 ff ff ff 	vmovsd	-136(%rbp), %xmm1
     6d2:	8b bd 74 ff ff ff 	movl	-140(%rbp), %edi
     6d8:	c5 fb 10 a5 68 ff ff ff 	vmovsd	-152(%rbp), %xmm4
     6e0:	c5 e9 57 d2 	vxorpd	%xmm2, %xmm2, %xmm2
     6e4:	c5 e1 57 db 	vxorpd	%xmm3, %xmm3, %xmm3
     6e8:	e9 91 fe ff ff 	jmp	-367 <__Z10preprocessPKfiiiii._omp_fn.2+0x25e>
     6ed:	0f 1f 00 	nopl	(%rax)

__Z9correlateiiPKfPf._omp_fn.3:
; #pragma omp parallel for schedule(dynamic,1)
     6f0:	55 	pushq	%rbp
     6f1:	b9 01 00 00 00 	movl	$1, %ecx
     6f6:	ba 01 00 00 00 	movl	$1, %edx
     6fb:	48 89 e5 	movq	%rsp, %rbp
     6fe:	41 57 	pushq	%r15
     700:	41 56 	pushq	%r14
     702:	41 55 	pushq	%r13
     704:	41 54 	pushq	%r12
     706:	53 	pushq	%rbx
     707:	48 83 e4 e0 	andq	$-32, %rsp
     70b:	48 81 ec a0 00 00 00 	subq	$160, %rsp
     712:	48 8b 47 08 	movq	8(%rdi), %rax
     716:	44 8b 77 14 	movl	20(%rdi), %r14d
     71a:	48 89 44 24 58 	movq	%rax, 88(%rsp)
     71f:	8b 47 18 	movl	24(%rdi), %eax
     722:	48 63 77 1c 	movslq	28(%rdi), %rsi
     726:	89 44 24 68 	movl	%eax, 104(%rsp)
     72a:	48 8b 07 	movq	(%rdi), %rax
     72d:	8b 5f 10 	movl	16(%rdi), %ebx
     730:	4c 8d 8c 24 98 00 00 00 	leaq	152(%rsp), %r9
     738:	4c 8d 84 24 90 00 00 00 	leaq	144(%rsp), %r8
     740:	31 ff 	xorl	%edi, %edi
     742:	44 89 74 24 6c 	movl	%r14d, 108(%rsp)
     747:	48 89 44 24 70 	movq	%rax, 112(%rsp)
     74c:	4c 89 4c 24 10 	movq	%r9, 16(%rsp)
     751:	4c 89 44 24 18 	movq	%r8, 24(%rsp)
     756:	e8 00 00 00 00 	callq	0 <__Z9correlateiiPKfPf._omp_fn.3+0x6b>
     75b:	84 c0 	testb	%al, %al
     75d:	0f 84 32 04 00 00 	je	1074 <__Z9correlateiiPKfPf._omp_fn.3+0x4a5>
     763:	8d 04 5b 	leal	(%rbx,%rbx,2), %eax
     766:	89 44 24 2c 	movl	%eax, 44(%rsp)
     76a:	43 8d 04 76 	leal	(%r14,%r14,2), %eax
     76e:	89 44 24 28 	movl	%eax, 40(%rsp)
     772:	42 8d 04 b5 00 00 00 00 	leal	(,%r14,4), %eax
     77a:	89 44 24 64 	movl	%eax, 100(%rsp)
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     77e:	41 89 dc 	movl	%ebx, %r12d
     781:	48 8b 84 24 90 00 00 00 	movq	144(%rsp), %rax
     789:	8b 9c 24 98 00 00 00 	movl	152(%rsp), %ebx
     790:	44 8d 1c 40 	leal	(%rax,%rax,2), %r11d
     794:	41 8d 73 02 	leal	2(%r11), %esi
     798:	89 44 24 40 	movl	%eax, 64(%rsp)
     79c:	89 f0 	movl	%esi, %eax
     79e:	41 0f af c4 	imull	%r12d, %eax
     7a2:	89 5c 24 30 	movl	%ebx, 48(%rsp)
     7a6:	41 8d 4b 01 	leal	1(%r11), %ecx
     7aa:	89 44 24 60 	movl	%eax, 96(%rsp)
     7ae:	8b 44 24 6c 	movl	108(%rsp), %eax
     7b2:	89 b4 24 88 00 00 00 	movl	%esi, 136(%rsp)
     7b9:	89 c3 	movl	%eax, %ebx
     7bb:	41 0f af db 	imull	%r11d, %ebx
     7bf:	89 8c 24 8c 00 00 00 	movl	%ecx, 140(%rsp)
     7c6:	89 5c 24 34 	movl	%ebx, 52(%rsp)
     7ca:	89 c3 	movl	%eax, %ebx
     7cc:	0f af c6 	imull	%esi, %eax
     7cf:	0f af d9 	imull	%ecx, %ebx
     7d2:	89 44 24 3c 	movl	%eax, 60(%rsp)
     7d6:	44 89 e0 	movl	%r12d, %eax
     7d9:	f7 d8 	negl	%eax
     7db:	01 c0 	addl	%eax, %eax
     7dd:	89 5c 24 38 	movl	%ebx, 56(%rsp)
     7e1:	89 44 24 24 	movl	%eax, 36(%rsp)
; for (int j = 0; j < ncH; j++) {
     7e5:	41 8d 43 03 	leal	3(%r11), %eax
; int col_v = row/V;
     7e9:	45 85 db 	testl	%r11d, %r11d
     7ec:	89 44 24 20 	movl	%eax, 32(%rsp)
     7f0:	41 0f 49 c3 	cmovnsl	%r11d, %eax
     7f4:	c1 f8 02 	sarl	$2, %eax
     7f7:	89 44 24 7c 	movl	%eax, 124(%rsp)
; for (int i = col_v; i < ncV; i++) {
     7fb:	39 44 24 68 	cmpl	%eax, 104(%rsp)
     7ff:	0f 8e 37 03 00 00 	jle	823 <__Z9correlateiiPKfPf._omp_fn.3+0x44c>
     805:	89 c6 	movl	%eax, %esi
; result[jj*ny+ii] = sum;
     807:	8b 5c 24 24 	movl	36(%rsp), %ebx
     80b:	8b 44 24 60 	movl	96(%rsp), %eax
     80f:	8b 4c 24 6c 	movl	108(%rsp), %ecx
     813:	01 c3 	addl	%eax, %ebx
     815:	44 29 e0 	subl	%r12d, %eax
     818:	89 44 24 50 	movl	%eax, 80(%rsp)
     81c:	8d 04 b5 00 00 00 00 	leal	(,%rsi,4), %eax
     823:	89 5c 24 44 	movl	%ebx, 68(%rsp)
     827:	44 8d 48 03 	leal	3(%rax), %r9d
     82b:	8d 58 01 	leal	1(%rax), %ebx
     82e:	89 84 24 84 00 00 00 	movl	%eax, 132(%rsp)
     835:	8b 44 24 64 	movl	100(%rsp), %eax
     839:	89 cf 	movl	%ecx, %edi
     83b:	0f af fb 	imull	%ebx, %edi
     83e:	0f af c6 	imull	%esi, %eax
     841:	4c 63 7c 24 34 	movslq	52(%rsp), %r15
     846:	4c 63 74 24 38 	movslq	56(%rsp), %r14
     84b:	29 f8 	subl	%edi, %eax
     84d:	89 44 24 54 	movl	%eax, 84(%rsp)
     851:	8d 41 ff 	leal	-1(%rcx), %eax
     854:	4c 63 6c 24 3c 	movslq	60(%rsp), %r13
     859:	89 7c 24 78 	movl	%edi, 120(%rsp)
     85d:	48 89 44 24 48 	movq	%rax, 72(%rsp)
     862:	49 c1 e7 05 	shlq	$5, %r15
     866:	49 c1 e6 05 	shlq	$5, %r14
     86a:	49 c1 e5 05 	shlq	$5, %r13
; asm("#foo");
     86e:	44 8b 54 24 6c 	movl	108(%rsp), %r10d
; for (int k = 0; k < na; k++) {
     873:	41 8d 41 ff 	leal	-1(%r9), %eax
     877:	89 84 24 80 00 00 00 	movl	%eax, 128(%rsp)
     87e:	45 85 d2 	testl	%r10d, %r10d
     881:	0f 8e 88 06 00 00 	jle	1672 <__Z9correlateiiPKfPf._omp_fn.3+0x81f>
     887:	48 63 74 24 78 	movslq	120(%rsp), %rsi
     88c:	44 89 d2 	movl	%r10d, %edx
     88f:	44 8b 44 24 54 	movl	84(%rsp), %r8d
     894:	01 f2 	addl	%esi, %edx
     896:	41 01 f0 	addl	%esi, %r8d
     899:	48 63 ca 	movslq	%edx, %rcx
     89c:	44 01 d2 	addl	%r10d, %edx
     89f:	4d 63 c0 	movslq	%r8d, %r8
     8a2:	48 63 d2 	movslq	%edx, %rdx
     8a5:	48 8b 7c 24 58 	movq	88(%rsp), %rdi
     8aa:	49 8d 40 01 	leaq	1(%r8), %rax
     8ae:	48 ff c6 	incq	%rsi
     8b1:	48 ff c1 	incq	%rcx
     8b4:	48 ff c2 	incq	%rdx
     8b7:	48 c1 e0 05 	shlq	$5, %rax
     8bb:	48 c1 e6 05 	shlq	$5, %rsi
     8bf:	48 c1 e1 05 	shlq	$5, %rcx
     8c3:	48 c1 e2 05 	shlq	$5, %rdx
     8c7:	49 89 fa 	movq	%rdi, %r10
     8ca:	48 01 f8 	addq	%rdi, %rax
     8cd:	48 01 fe 	addq	%rdi, %rsi
     8d0:	48 01 f9 	addq	%rdi, %rcx
     8d3:	48 01 fa 	addq	%rdi, %rdx
     8d6:	48 8b 7c 24 48 	movq	72(%rsp), %rdi
; block[id][jd] = double4_0;
     8db:	c5 d9 57 e4 	vxorpd	%xmm4, %xmm4, %xmm4
     8df:	4c 01 c7 	addq	%r8, %rdi
     8e2:	48 c1 e7 05 	shlq	$5, %rdi
     8e6:	49 f7 d8 	negq	%r8
     8e9:	4d 8d 54 3a 40 	leaq	64(%r10,%rdi), %r10
     8ee:	49 c1 e0 05 	shlq	$5, %r8
     8f2:	c5 7d 28 c4 	vmovapd	%ymm4, %ymm8
     8f6:	c5 7d 28 e4 	vmovapd	%ymm4, %ymm12
     8fa:	c5 fd 28 ec 	vmovapd	%ymm4, %ymm5
     8fe:	c5 7d 28 cc 	vmovapd	%ymm4, %ymm9
     902:	c5 7d 28 ec 	vmovapd	%ymm4, %ymm13
     906:	c5 fd 28 f4 	vmovapd	%ymm4, %ymm6
     90a:	c5 7d 28 d4 	vmovapd	%ymm4, %ymm10
     90e:	c5 7d 28 f4 	vmovapd	%ymm4, %ymm14
     912:	c5 fd 28 fc 	vmovapd	%ymm4, %ymm7
     916:	c5 7d 28 dc 	vmovapd	%ymm4, %ymm11
     91a:	c5 7d 28 fc 	vmovapd	%ymm4, %ymm15
     91e:	66 90 	nop
; __builtin_prefetch(&data[na*(i * V + l) + k + 1]);
     920:	49 8d 3c 00 	leaq	(%r8,%rax), %rdi
; double4_t b8 = data[na*(i * V + l) + k];
     924:	c5 fd 28 58 e0 	vmovapd	-32(%rax), %ymm3
; double4_t a8 = data[na*(j * H + d) + k];
     929:	c4 a1 7d 28 54 3f e0 	vmovapd	-32(%rdi,%r15), %ymm2
     930:	c4 a1 7d 28 4c 37 e0 	vmovapd	-32(%rdi,%r14), %ymm1
     937:	c4 a1 7d 28 44 2f e0 	vmovapd	-32(%rdi,%r13), %ymm0
; block[l][d] += a8 * b8;
     93e:	c4 62 e5 b8 fa 	vfmadd231pd	%ymm2, %ymm3, %ymm15
     943:	c4 62 e5 b8 d9 	vfmadd231pd	%ymm1, %ymm3, %ymm11
     948:	c4 e2 e5 b8 f8 	vfmadd231pd	%ymm0, %ymm3, %ymm7
; double4_t b8 = data[na*(i * V + l) + k];
     94d:	c5 fd 28 5e e0 	vmovapd	-32(%rsi), %ymm3
; __builtin_prefetch(&data[na*(i * V + l) + k + 1]);
     952:	0f 18 08 	prefetcht0	(%rax)
; double4_t b8 = data[na*(i * V + l) + k];
     955:	c4 62 ed b8 f3 	vfmadd231pd	%ymm3, %ymm2, %ymm14
; block[l][d] += a8 * b8;
     95a:	c4 62 f5 b8 d3 	vfmadd231pd	%ymm3, %ymm1, %ymm10
     95f:	c4 e2 fd b8 f3 	vfmadd231pd	%ymm3, %ymm0, %ymm6
; double4_t b8 = data[na*(i * V + l) + k];
     964:	c5 fd 28 59 e0 	vmovapd	-32(%rcx), %ymm3
     969:	48 83 c0 20 	addq	$32, %rax
; block[l][d] += a8 * b8;
     96d:	c4 62 ed b8 eb 	vfmadd231pd	%ymm3, %ymm2, %ymm13
     972:	c4 62 f5 b8 cb 	vfmadd231pd	%ymm3, %ymm1, %ymm9
     977:	c4 e2 fd b8 eb 	vfmadd231pd	%ymm3, %ymm0, %ymm5
; double4_t b8 = data[na*(i * V + l) + k];
     97c:	c5 fd 28 5a e0 	vmovapd	-32(%rdx), %ymm3
; __builtin_prefetch(&data[na*(i * V + l) + k + 1]);
     981:	0f 18 0e 	prefetcht0	(%rsi)
; double4_t b8 = data[na*(i * V + l) + k];
     984:	0f 18 09 	prefetcht0	(%rcx)
     987:	0f 18 0a 	prefetcht0	(%rdx)
     98a:	c4 62 ed b8 e3 	vfmadd231pd	%ymm3, %ymm2, %ymm12
; double4_t a8 = data[na*(j * H + d) + k];
     98f:	c4 62 f5 b8 c3 	vfmadd231pd	%ymm3, %ymm1, %ymm8
     994:	c4 e2 fd b8 e3 	vfmadd231pd	%ymm3, %ymm0, %ymm4
; block[l][d] += a8 * b8;
     999:	48 83 c6 20 	addq	$32, %rsi
     99d:	48 83 c1 20 	addq	$32, %rcx
     9a1:	48 83 c2 20 	addq	$32, %rdx
; for (int k = 0; k < na; k++) {
     9a5:	49 39 c2 	cmpq	%rax, %r10
     9a8:	0f 85 72 ff ff ff 	jne	-142 <__Z9correlateiiPKfPf._omp_fn.3+0x230>
; int jj = j * H + jd;
     9ae:	8b 8c 24 84 00 00 00 	movl	132(%rsp), %ecx
; if (ii < ny && jj < ny && ii >= jj) {
     9b5:	41 39 cb 	cmpl	%ecx, %r11d
     9b8:	89 ca 	movl	%ecx, %edx
     9ba:	41 0f 4d d3 	cmovgel	%r11d, %edx
     9be:	0f 9e c0 	setle	%al
     9c1:	41 39 d4 	cmpl	%edx, %r12d
     9c4:	7e 08 	jle	8 <__Z9correlateiiPKfPf._omp_fn.3+0x2de>
     9c6:	84 c0 	testb	%al, %al
     9c8:	0f 85 e3 03 00 00 	jne	995 <__Z9correlateiiPKfPf._omp_fn.3+0x6c1>
; int jj = j * H + jd;
     9ce:	44 39 db 	cmpl	%r11d, %ebx
; if (ii < ny && jj < ny && ii >= jj) {
     9d1:	44 89 da 	movl	%r11d, %edx
     9d4:	0f 4d d3 	cmovgel	%ebx, %edx
     9d7:	41 39 d4 	cmpl	%edx, %r12d
     9da:	7e 09 	jle	9 <__Z9correlateiiPKfPf._omp_fn.3+0x2f5>
     9dc:	44 39 db 	cmpl	%r11d, %ebx
     9df:	0f 8d 12 04 00 00 	jge	1042 <__Z9correlateiiPKfPf._omp_fn.3+0x707>
; int jj = j * H + jd;
     9e5:	8b b4 24 80 00 00 00 	movl	128(%rsp), %esi
; if (ii < ny && jj < ny && ii >= jj) {
     9ec:	41 39 f3 	cmpl	%esi, %r11d
     9ef:	89 f2 	movl	%esi, %edx
     9f1:	41 0f 4d d3 	cmovgel	%r11d, %edx
     9f5:	41 39 d4 	cmpl	%edx, %r12d
     9f8:	7e 09 	jle	9 <__Z9correlateiiPKfPf._omp_fn.3+0x313>
     9fa:	41 39 f3 	cmpl	%esi, %r11d
     9fd:	0f 8e 39 04 00 00 	jle	1081 <__Z9correlateiiPKfPf._omp_fn.3+0x74c>
; int jj = j * H + jd;
     a03:	45 39 cb 	cmpl	%r9d, %r11d
; if (ii < ny && jj < ny && ii >= jj) {
     a06:	44 89 ca 	movl	%r9d, %edx
     a09:	41 0f 4d d3 	cmovgel	%r11d, %edx
     a0d:	41 39 d4 	cmpl	%edx, %r12d
     a10:	7e 09 	jle	9 <__Z9correlateiiPKfPf._omp_fn.3+0x32b>
     a12:	45 39 cb 	cmpl	%r9d, %r11d
     a15:	0f 8e 68 04 00 00 	jle	1128 <__Z9correlateiiPKfPf._omp_fn.3+0x793>
; int jj = j * H + jd;
     a1b:	8b bc 24 84 00 00 00 	movl	132(%rsp), %edi
; if (ii < ny && jj < ny && ii >= jj) {
     a22:	8b b4 24 8c 00 00 00 	movl	140(%rsp), %esi
     a29:	39 f7 	cmpl	%esi, %edi
     a2b:	89 f2 	movl	%esi, %edx
     a2d:	0f 4d d7 	cmovgel	%edi, %edx
     a30:	41 39 d4 	cmpl	%edx, %r12d
     a33:	7e 08 	jle	8 <__Z9correlateiiPKfPf._omp_fn.3+0x34d>
     a35:	39 f7 	cmpl	%esi, %edi
     a37:	0f 8d 8c 04 00 00 	jge	1164 <__Z9correlateiiPKfPf._omp_fn.3+0x7d9>
; int jj = j * H + jd;
     a3d:	8b 8c 24 8c 00 00 00 	movl	140(%rsp), %ecx
; if (ii < ny && jj < ny && ii >= jj) {
     a44:	39 cb 	cmpl	%ecx, %ebx
     a46:	89 ca 	movl	%ecx, %edx
     a48:	0f 4d d3 	cmovgel	%ebx, %edx
     a4b:	41 39 d4 	cmpl	%edx, %r12d
     a4e:	7e 08 	jle	8 <__Z9correlateiiPKfPf._omp_fn.3+0x368>
     a50:	84 c0 	testb	%al, %al
     a52:	0f 85 d8 01 00 00 	jne	472 <__Z9correlateiiPKfPf._omp_fn.3+0x540>
; int jj = j * H + jd;
     a58:	8b b4 24 80 00 00 00 	movl	128(%rsp), %esi
; if (ii < ny && jj < ny && ii >= jj) {
     a5f:	8b 8c 24 8c 00 00 00 	movl	140(%rsp), %ecx
     a66:	39 ce 	cmpl	%ecx, %esi
     a68:	89 ca 	movl	%ecx, %edx
     a6a:	0f 4d d6 	cmovgel	%esi, %edx
     a6d:	41 39 d4 	cmpl	%edx, %r12d
     a70:	7e 08 	jle	8 <__Z9correlateiiPKfPf._omp_fn.3+0x38a>
     a72:	39 ce 	cmpl	%ecx, %esi
     a74:	0f 8d fb 01 00 00 	jge	507 <__Z9correlateiiPKfPf._omp_fn.3+0x585>
; int jj = j * H + jd;
     a7a:	8b b4 24 8c 00 00 00 	movl	140(%rsp), %esi
; if (ii < ny && jj < ny && ii >= jj) {
     a81:	41 39 f1 	cmpl	%esi, %r9d
     a84:	89 f2 	movl	%esi, %edx
     a86:	41 0f 4d d1 	cmovgel	%r9d, %edx
     a8a:	41 39 d4 	cmpl	%edx, %r12d
     a8d:	7e 09 	jle	9 <__Z9correlateiiPKfPf._omp_fn.3+0x3a8>
     a8f:	41 39 f1 	cmpl	%esi, %r9d
     a92:	0f 8d 24 02 00 00 	jge	548 <__Z9correlateiiPKfPf._omp_fn.3+0x5cc>
; int jj = j * H + jd;
     a98:	8b bc 24 84 00 00 00 	movl	132(%rsp), %edi
; if (ii < ny && jj < ny && ii >= jj) {
     a9f:	8b 8c 24 88 00 00 00 	movl	136(%rsp), %ecx
     aa6:	39 cf 	cmpl	%ecx, %edi
     aa8:	89 ca 	movl	%ecx, %edx
     aaa:	0f 4d d7 	cmovgel	%edi, %edx
     aad:	41 39 d4 	cmpl	%edx, %r12d
     ab0:	7e 08 	jle	8 <__Z9correlateiiPKfPf._omp_fn.3+0x3ca>
     ab2:	39 cf 	cmpl	%ecx, %edi
     ab4:	0f 8d 48 02 00 00 	jge	584 <__Z9correlateiiPKfPf._omp_fn.3+0x612>
; int jj = j * H + jd;
     aba:	8b bc 24 88 00 00 00 	movl	136(%rsp), %edi
; if (ii < ny && jj < ny && ii >= jj) {
     ac1:	39 fb 	cmpl	%edi, %ebx
     ac3:	89 fa 	movl	%edi, %edx
     ac5:	0f 4d d3 	cmovgel	%ebx, %edx
     ac8:	41 39 d4 	cmpl	%edx, %r12d
     acb:	7e 08 	jle	8 <__Z9correlateiiPKfPf._omp_fn.3+0x3e5>
     acd:	39 fb 	cmpl	%edi, %ebx
     acf:	0f 8d d4 00 00 00 	jge	212 <__Z9correlateiiPKfPf._omp_fn.3+0x4b9>
; int jj = j * H + jd;
     ad5:	8b 94 24 80 00 00 00 	movl	128(%rsp), %edx
; if (ii < ny && jj < ny && ii >= jj) {
     adc:	8b 8c 24 88 00 00 00 	movl	136(%rsp), %ecx
     ae3:	39 ca 	cmpl	%ecx, %edx
     ae5:	0f 4c d1 	cmovll	%ecx, %edx
     ae8:	41 39 d4 	cmpl	%edx, %r12d
     aeb:	7e 08 	jle	8 <__Z9correlateiiPKfPf._omp_fn.3+0x405>
     aed:	84 c0 	testb	%al, %al
     aef:	0f 85 f7 00 00 00 	jne	247 <__Z9correlateiiPKfPf._omp_fn.3+0x4fc>
; int jj = j * H + jd;
     af5:	8b b4 24 88 00 00 00 	movl	136(%rsp), %esi
; if (ii < ny && jj < ny && ii >= jj) {
     afc:	41 39 f1 	cmpl	%esi, %r9d
     aff:	89 f0 	movl	%esi, %eax
     b01:	41 0f 4d c1 	cmovgel	%r9d, %eax
     b05:	41 39 c4 	cmpl	%eax, %r12d
     b08:	7e 09 	jle	9 <__Z9correlateiiPKfPf._omp_fn.3+0x423>
     b0a:	41 39 f1 	cmpl	%esi, %r9d
     b0d:	0f 8d 33 02 00 00 	jge	563 <__Z9correlateiiPKfPf._omp_fn.3+0x656>
; asm("#bar");
     b13:	ff 44 24 7c 	incl	124(%rsp)
; for (int i = col_v; i < ncV; i++) {
     b17:	8b 4c 24 64 	movl	100(%rsp), %ecx
     b1b:	41 83 c1 04 	addl	$4, %r9d
     b1f:	83 84 24 84 00 00 00 04 	addl	$4, 132(%rsp)
     b27:	8b 44 24 7c 	movl	124(%rsp), %eax
     b2b:	83 c3 04 	addl	$4, %ebx
     b2e:	01 4c 24 78 	addl	%ecx, 120(%rsp)
     b32:	39 44 24 68 	cmpl	%eax, 104(%rsp)
     b36:	0f 85 32 fd ff ff 	jne	-718 <__Z9correlateiiPKfPf._omp_fn.3+0x17e>
     b3c:	ff 44 24 40 	incl	64(%rsp)
     b40:	8b 5c 24 28 	movl	40(%rsp), %ebx
     b44:	8b 7c 24 2c 	movl	44(%rsp), %edi
     b48:	44 8b 5c 24 20 	movl	32(%rsp), %r11d
     b4d:	8b 44 24 40 	movl	64(%rsp), %eax
     b51:	01 7c 24 60 	addl	%edi, 96(%rsp)
     b55:	83 84 24 88 00 00 00 03 	addl	$3, 136(%rsp)
     b5d:	83 84 24 8c 00 00 00 03 	addl	$3, 140(%rsp)
     b65:	01 5c 24 34 	addl	%ebx, 52(%rsp)
     b69:	01 5c 24 38 	addl	%ebx, 56(%rsp)
     b6d:	01 5c 24 3c 	addl	%ebx, 60(%rsp)
     b71:	39 44 24 30 	cmpl	%eax, 48(%rsp)
     b75:	0f 8f 6a fc ff ff 	jg	-918 <__Z9correlateiiPKfPf._omp_fn.3+0xf5>
     b7b:	48 8b 74 24 10 	movq	16(%rsp), %rsi
     b80:	48 8b 7c 24 18 	movq	24(%rsp), %rdi
     b85:	c5 f8 77 	vzeroupper
     b88:	e8 00 00 00 00 	callq	0 <__Z9correlateiiPKfPf._omp_fn.3+0x49d>
     b8d:	84 c0 	testb	%al, %al
     b8f:	0f 85 ec fb ff ff 	jne	-1044 <__Z9correlateiiPKfPf._omp_fn.3+0x91>
     b95:	e8 00 00 00 00 	callq	0 <__Z9correlateiiPKfPf._omp_fn.3+0x4aa>
; #pragma omp parallel for schedule(dynamic,1)
     b9a:	48 8d 65 d8 	leaq	-40(%rbp), %rsp
     b9e:	5b 	popq	%rbx
     b9f:	41 5c 	popq	%r12
     ba1:	41 5d 	popq	%r13
     ba3:	41 5e 	popq	%r14
     ba5:	41 5f 	popq	%r15
     ba7:	5d 	popq	%rbp
     ba8:	c3 	retq
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     ba9:	c5 f1 57 c9 	vxorpd	%xmm1, %xmm1, %xmm1
     bad:	c5 f3 58 ce 	vaddsd	%xmm6, %xmm1, %xmm1
     bb1:	c5 c9 15 c6 	vunpckhpd	%xmm6, %xmm6, %xmm0
     bb5:	c4 e3 7d 19 f6 01 	vextractf128	$1, %ymm6, %xmm6
     bbb:	c5 fb 58 c1 	vaddsd	%xmm1, %xmm0, %xmm0
     bbf:	8b 74 24 60 	movl	96(%rsp), %esi
; result[jj*ny+ii] = sum;
     bc3:	48 8b 7c 24 70 	movq	112(%rsp), %rdi
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     bc8:	c5 cb 58 c0 	vaddsd	%xmm0, %xmm6, %xmm0
     bcc:	c5 c9 15 f6 	vunpckhpd	%xmm6, %xmm6, %xmm6
; result[jj*ny+ii] = sum;
     bd0:	8d 14 1e 	leal	(%rsi,%rbx), %edx
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     bd3:	c5 cb 58 c0 	vaddsd	%xmm0, %xmm6, %xmm0
; result[jj*ny+ii] = sum;
     bd7:	48 63 d2 	movslq	%edx, %rdx
     bda:	c5 c8 57 f6 	vxorps	%xmm6, %xmm6, %xmm6
     bde:	c5 cb 5a f0 	vcvtsd2ss	%xmm0, %xmm6, %xmm6
     be2:	c5 fa 11 34 97 	vmovss	%xmm6, (%rdi,%rdx,4)
     be7:	e9 e9 fe ff ff 	jmp	-279 <__Z9correlateiiPKfPf._omp_fn.3+0x3e5>
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     bec:	c5 f1 57 c9 	vxorpd	%xmm1, %xmm1, %xmm1
     bf0:	c5 f3 58 cd 	vaddsd	%xmm5, %xmm1, %xmm1
     bf4:	c5 d1 15 c5 	vunpckhpd	%xmm5, %xmm5, %xmm0
     bf8:	c4 e3 7d 19 ed 01 	vextractf128	$1, %ymm5, %xmm5
     bfe:	c5 fb 58 c1 	vaddsd	%xmm1, %xmm0, %xmm0
     c02:	8b 44 24 60 	movl	96(%rsp), %eax
; result[jj*ny+ii] = sum;
     c06:	48 8b 4c 24 70 	movq	112(%rsp), %rcx
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     c0b:	c5 d3 58 c0 	vaddsd	%xmm0, %xmm5, %xmm0
     c0f:	c5 d1 15 ed 	vunpckhpd	%xmm5, %xmm5, %xmm5
; result[jj*ny+ii] = sum;
     c13:	42 8d 44 08 ff 	leal	-1(%rax,%r9), %eax
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     c18:	c5 d3 58 c0 	vaddsd	%xmm0, %xmm5, %xmm0
; result[jj*ny+ii] = sum;
     c1c:	48 98 	cltq
     c1e:	c5 d0 57 ed 	vxorps	%xmm5, %xmm5, %xmm5
     c22:	c5 d3 5a e8 	vcvtsd2ss	%xmm0, %xmm5, %xmm5
     c26:	c5 fa 11 2c 81 	vmovss	%xmm5, (%rcx,%rax,4)
     c2b:	e9 c5 fe ff ff 	jmp	-315 <__Z9correlateiiPKfPf._omp_fn.3+0x405>
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     c30:	c5 e9 57 d2 	vxorpd	%xmm2, %xmm2, %xmm2
     c34:	c5 ab 58 ca 	vaddsd	%xmm2, %xmm10, %xmm1
     c38:	c4 c1 29 15 c2 	vunpckhpd	%xmm10, %xmm10, %xmm0
     c3d:	c4 43 7d 19 d2 01 	vextractf128	$1, %ymm10, %xmm10
     c43:	c5 fb 58 c1 	vaddsd	%xmm1, %xmm0, %xmm0
     c47:	8b 7c 24 50 	movl	80(%rsp), %edi
; result[jj*ny+ii] = sum;
     c4b:	48 8b 4c 24 70 	movq	112(%rsp), %rcx
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     c50:	c5 ab 58 c0 	vaddsd	%xmm0, %xmm10, %xmm0
     c54:	c4 41 29 15 d2 	vunpckhpd	%xmm10, %xmm10, %xmm10
; result[jj*ny+ii] = sum;
     c59:	8d 14 3b 	leal	(%rbx,%rdi), %edx
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     c5c:	c5 ab 58 c0 	vaddsd	%xmm0, %xmm10, %xmm0
; result[jj*ny+ii] = sum;
     c60:	48 63 d2 	movslq	%edx, %rdx
     c63:	c5 e8 57 d2 	vxorps	%xmm2, %xmm2, %xmm2
     c67:	c5 eb 5a d0 	vcvtsd2ss	%xmm0, %xmm2, %xmm2
     c6b:	c5 fa 11 14 91 	vmovss	%xmm2, (%rcx,%rdx,4)
     c70:	e9 e3 fd ff ff 	jmp	-541 <__Z9correlateiiPKfPf._omp_fn.3+0x368>
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     c75:	c5 e9 57 d2 	vxorpd	%xmm2, %xmm2, %xmm2
     c79:	c5 b3 58 ca 	vaddsd	%xmm2, %xmm9, %xmm1
     c7d:	c4 c1 31 15 c1 	vunpckhpd	%xmm9, %xmm9, %xmm0
     c82:	c4 43 7d 19 c9 01 	vextractf128	$1, %ymm9, %xmm9
     c88:	c5 fb 58 c1 	vaddsd	%xmm1, %xmm0, %xmm0
     c8c:	8b 74 24 50 	movl	80(%rsp), %esi
; result[jj*ny+ii] = sum;
     c90:	48 8b 7c 24 70 	movq	112(%rsp), %rdi
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     c95:	c5 b3 58 c0 	vaddsd	%xmm0, %xmm9, %xmm0
     c99:	c4 41 31 15 c9 	vunpckhpd	%xmm9, %xmm9, %xmm9
; result[jj*ny+ii] = sum;
     c9e:	41 8d 54 31 ff 	leal	-1(%r9,%rsi), %edx
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     ca3:	c5 b3 58 c0 	vaddsd	%xmm0, %xmm9, %xmm0
; result[jj*ny+ii] = sum;
     ca7:	48 63 d2 	movslq	%edx, %rdx
     caa:	c5 e8 57 d2 	vxorps	%xmm2, %xmm2, %xmm2
     cae:	c5 eb 5a d0 	vcvtsd2ss	%xmm0, %xmm2, %xmm2
     cb2:	c5 fa 11 14 97 	vmovss	%xmm2, (%rdi,%rdx,4)
     cb7:	e9 be fd ff ff 	jmp	-578 <__Z9correlateiiPKfPf._omp_fn.3+0x38a>
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     cbc:	c5 e9 57 d2 	vxorpd	%xmm2, %xmm2, %xmm2
     cc0:	c5 bb 58 ca 	vaddsd	%xmm2, %xmm8, %xmm1
     cc4:	c4 c1 39 15 c0 	vunpckhpd	%xmm8, %xmm8, %xmm0
     cc9:	c4 43 7d 19 c0 01 	vextractf128	$1, %ymm8, %xmm8
     ccf:	c5 fb 58 c1 	vaddsd	%xmm1, %xmm0, %xmm0
     cd3:	8b 4c 24 50 	movl	80(%rsp), %ecx
; result[jj*ny+ii] = sum;
     cd7:	48 8b 74 24 70 	movq	112(%rsp), %rsi
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     cdc:	c5 bb 58 c0 	vaddsd	%xmm0, %xmm8, %xmm0
     ce0:	c4 41 39 15 c0 	vunpckhpd	%xmm8, %xmm8, %xmm8
; result[jj*ny+ii] = sum;
     ce5:	41 8d 14 09 	leal	(%r9,%rcx), %edx
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     ce9:	c5 bb 58 c0 	vaddsd	%xmm0, %xmm8, %xmm0
; result[jj*ny+ii] = sum;
     ced:	48 63 d2 	movslq	%edx, %rdx
     cf0:	c5 e8 57 d2 	vxorps	%xmm2, %xmm2, %xmm2
     cf4:	c5 eb 5a d0 	vcvtsd2ss	%xmm0, %xmm2, %xmm2
     cf8:	c5 fa 11 14 96 	vmovss	%xmm2, (%rsi,%rdx,4)
     cfd:	e9 96 fd ff ff 	jmp	-618 <__Z9correlateiiPKfPf._omp_fn.3+0x3a8>
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     d02:	c5 f1 57 c9 	vxorpd	%xmm1, %xmm1, %xmm1
     d06:	c5 f3 58 cf 	vaddsd	%xmm7, %xmm1, %xmm1
     d0a:	c5 c1 15 c7 	vunpckhpd	%xmm7, %xmm7, %xmm0
     d0e:	c4 e3 7d 19 ff 01 	vextractf128	$1, %ymm7, %xmm7
     d14:	c5 fb 58 c1 	vaddsd	%xmm1, %xmm0, %xmm0
     d18:	8b 7c 24 60 	movl	96(%rsp), %edi
; result[jj*ny+ii] = sum;
     d1c:	48 8b 4c 24 70 	movq	112(%rsp), %rcx
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     d21:	c5 c3 58 c0 	vaddsd	%xmm0, %xmm7, %xmm0
     d25:	c5 c1 15 ff 	vunpckhpd	%xmm7, %xmm7, %xmm7
; result[jj*ny+ii] = sum;
     d29:	8d 54 1f ff 	leal	-1(%rdi,%rbx), %edx
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     d2d:	c5 c3 58 c0 	vaddsd	%xmm0, %xmm7, %xmm0
; result[jj*ny+ii] = sum;
     d31:	48 63 d2 	movslq	%edx, %rdx
     d34:	c5 c0 57 ff 	vxorps	%xmm7, %xmm7, %xmm7
     d38:	c5 c3 5a f8 	vcvtsd2ss	%xmm0, %xmm7, %xmm7
     d3c:	c5 fa 11 3c 91 	vmovss	%xmm7, (%rcx,%rdx,4)
     d41:	e9 74 fd ff ff 	jmp	-652 <__Z9correlateiiPKfPf._omp_fn.3+0x3ca>
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     d46:	c5 f1 57 c9 	vxorpd	%xmm1, %xmm1, %xmm1
     d4a:	c5 f3 58 cc 	vaddsd	%xmm4, %xmm1, %xmm1
     d4e:	c5 d9 15 c4 	vunpckhpd	%xmm4, %xmm4, %xmm0
     d52:	c4 e3 7d 19 e4 01 	vextractf128	$1, %ymm4, %xmm4
     d58:	c5 fb 58 c1 	vaddsd	%xmm1, %xmm0, %xmm0
     d5c:	8b 44 24 60 	movl	96(%rsp), %eax
; result[jj*ny+ii] = sum;
     d60:	48 8b 74 24 70 	movq	112(%rsp), %rsi
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     d65:	c5 db 58 c0 	vaddsd	%xmm0, %xmm4, %xmm0
     d69:	c5 d9 15 e4 	vunpckhpd	%xmm4, %xmm4, %xmm4
; result[jj*ny+ii] = sum;
     d6d:	44 01 c8 	addl	%r9d, %eax
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     d70:	c5 db 58 c0 	vaddsd	%xmm0, %xmm4, %xmm0
; result[jj*ny+ii] = sum;
     d74:	48 98 	cltq
     d76:	c5 d8 57 e4 	vxorps	%xmm4, %xmm4, %xmm4
     d7a:	c5 db 5a e0 	vcvtsd2ss	%xmm0, %xmm4, %xmm4
     d7e:	c5 fa 11 24 86 	vmovss	%xmm4, (%rsi,%rax,4)
; asm("#bar");
     d83:	ff 44 24 7c 	incl	124(%rsp)
; for (int i = col_v; i < ncV; i++) {
     d87:	8b 7c 24 64 	movl	100(%rsp), %edi
     d8b:	41 83 c1 04 	addl	$4, %r9d
     d8f:	83 84 24 84 00 00 00 04 	addl	$4, 132(%rsp)
     d97:	8b 44 24 7c 	movl	124(%rsp), %eax
     d9b:	83 c3 04 	addl	$4, %ebx
     d9e:	01 7c 24 78 	addl	%edi, 120(%rsp)
     da2:	39 44 24 68 	cmpl	%eax, 104(%rsp)
     da6:	0f 85 c2 fa ff ff 	jne	-1342 <__Z9correlateiiPKfPf._omp_fn.3+0x17e>
     dac:	e9 8b fd ff ff 	jmp	-629 <__Z9correlateiiPKfPf._omp_fn.3+0x44c>
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     db1:	c5 e9 57 d2 	vxorpd	%xmm2, %xmm2, %xmm2
     db5:	c5 83 58 ca 	vaddsd	%xmm2, %xmm15, %xmm1
     db9:	c4 c1 01 15 c7 	vunpckhpd	%xmm15, %xmm15, %xmm0
     dbe:	c4 43 7d 19 ff 01 	vextractf128	$1, %ymm15, %xmm15
     dc4:	c5 fb 58 c1 	vaddsd	%xmm1, %xmm0, %xmm0
     dc8:	8b 4c 24 44 	movl	68(%rsp), %ecx
; result[jj*ny+ii] = sum;
     dcc:	48 8b 7c 24 70 	movq	112(%rsp), %rdi
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     dd1:	c5 83 58 c0 	vaddsd	%xmm0, %xmm15, %xmm0
     dd5:	c4 41 01 15 ff 	vunpckhpd	%xmm15, %xmm15, %xmm15
; result[jj*ny+ii] = sum;
     dda:	8d 54 0b ff 	leal	-1(%rbx,%rcx), %edx
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     dde:	c5 83 58 c0 	vaddsd	%xmm0, %xmm15, %xmm0
; result[jj*ny+ii] = sum;
     de2:	48 63 d2 	movslq	%edx, %rdx
     de5:	c5 e8 57 d2 	vxorps	%xmm2, %xmm2, %xmm2
     de9:	c5 eb 5a d0 	vcvtsd2ss	%xmm0, %xmm2, %xmm2
     ded:	c5 fa 11 14 97 	vmovss	%xmm2, (%rdi,%rdx,4)
     df2:	e9 d7 fb ff ff 	jmp	-1065 <__Z9correlateiiPKfPf._omp_fn.3+0x2de>
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     df7:	c5 e9 57 d2 	vxorpd	%xmm2, %xmm2, %xmm2
     dfb:	c5 8b 58 ca 	vaddsd	%xmm2, %xmm14, %xmm1
     dff:	c4 c1 09 15 c6 	vunpckhpd	%xmm14, %xmm14, %xmm0
     e04:	c4 43 7d 19 f6 01 	vextractf128	$1, %ymm14, %xmm14
     e0a:	c5 fb 58 c1 	vaddsd	%xmm1, %xmm0, %xmm0
     e0e:	8b 4c 24 44 	movl	68(%rsp), %ecx
; result[jj*ny+ii] = sum;
     e12:	48 8b 74 24 70 	movq	112(%rsp), %rsi
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     e17:	c5 8b 58 c0 	vaddsd	%xmm0, %xmm14, %xmm0
     e1b:	c4 41 09 15 f6 	vunpckhpd	%xmm14, %xmm14, %xmm14
; result[jj*ny+ii] = sum;
     e20:	8d 14 0b 	leal	(%rbx,%rcx), %edx
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     e23:	c5 8b 58 c0 	vaddsd	%xmm0, %xmm14, %xmm0
; result[jj*ny+ii] = sum;
     e27:	48 63 d2 	movslq	%edx, %rdx
     e2a:	c5 e8 57 d2 	vxorps	%xmm2, %xmm2, %xmm2
     e2e:	c5 eb 5a d0 	vcvtsd2ss	%xmm0, %xmm2, %xmm2
     e32:	c5 fa 11 14 96 	vmovss	%xmm2, (%rsi,%rdx,4)
     e37:	e9 a9 fb ff ff 	jmp	-1111 <__Z9correlateiiPKfPf._omp_fn.3+0x2f5>
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     e3c:	c5 e9 57 d2 	vxorpd	%xmm2, %xmm2, %xmm2
     e40:	c5 93 58 ca 	vaddsd	%xmm2, %xmm13, %xmm1
     e44:	c4 c1 11 15 c5 	vunpckhpd	%xmm13, %xmm13, %xmm0
     e49:	c4 43 7d 19 ed 01 	vextractf128	$1, %ymm13, %xmm13
     e4f:	c5 fb 58 c1 	vaddsd	%xmm1, %xmm0, %xmm0
     e53:	8b 7c 24 44 	movl	68(%rsp), %edi
; result[jj*ny+ii] = sum;
     e57:	48 8b 4c 24 70 	movq	112(%rsp), %rcx
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     e5c:	c5 93 58 c0 	vaddsd	%xmm0, %xmm13, %xmm0
     e60:	c4 41 11 15 ed 	vunpckhpd	%xmm13, %xmm13, %xmm13
; result[jj*ny+ii] = sum;
     e65:	41 8d 54 39 ff 	leal	-1(%r9,%rdi), %edx
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     e6a:	c5 93 58 c0 	vaddsd	%xmm0, %xmm13, %xmm0
; result[jj*ny+ii] = sum;
     e6e:	48 63 d2 	movslq	%edx, %rdx
     e71:	c5 e8 57 d2 	vxorps	%xmm2, %xmm2, %xmm2
     e75:	c5 eb 5a d0 	vcvtsd2ss	%xmm0, %xmm2, %xmm2
     e79:	c5 fa 11 14 91 	vmovss	%xmm2, (%rcx,%rdx,4)
     e7e:	e9 80 fb ff ff 	jmp	-1152 <__Z9correlateiiPKfPf._omp_fn.3+0x313>
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     e83:	c5 e9 57 d2 	vxorpd	%xmm2, %xmm2, %xmm2
     e87:	c5 9b 58 ca 	vaddsd	%xmm2, %xmm12, %xmm1
     e8b:	c4 c1 19 15 c4 	vunpckhpd	%xmm12, %xmm12, %xmm0
     e90:	c4 43 7d 19 e4 01 	vextractf128	$1, %ymm12, %xmm12
     e96:	c5 fb 58 c1 	vaddsd	%xmm1, %xmm0, %xmm0
     e9a:	8b 74 24 44 	movl	68(%rsp), %esi
; result[jj*ny+ii] = sum;
     e9e:	48 8b 7c 24 70 	movq	112(%rsp), %rdi
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     ea3:	c5 9b 58 c0 	vaddsd	%xmm0, %xmm12, %xmm0
     ea7:	c4 41 19 15 e4 	vunpckhpd	%xmm12, %xmm12, %xmm12
; result[jj*ny+ii] = sum;
     eac:	41 8d 14 31 	leal	(%r9,%rsi), %edx
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     eb0:	c5 9b 58 c0 	vaddsd	%xmm0, %xmm12, %xmm0
; result[jj*ny+ii] = sum;
     eb4:	48 63 d2 	movslq	%edx, %rdx
     eb7:	c5 e8 57 d2 	vxorps	%xmm2, %xmm2, %xmm2
     ebb:	c5 eb 5a d0 	vcvtsd2ss	%xmm0, %xmm2, %xmm2
     ebf:	c5 fa 11 14 97 	vmovss	%xmm2, (%rdi,%rdx,4)
     ec4:	e9 52 fb ff ff 	jmp	-1198 <__Z9correlateiiPKfPf._omp_fn.3+0x32b>
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     ec9:	c5 e9 57 d2 	vxorpd	%xmm2, %xmm2, %xmm2
     ecd:	c5 a3 58 ca 	vaddsd	%xmm2, %xmm11, %xmm1
     ed1:	c4 c1 21 15 c3 	vunpckhpd	%xmm11, %xmm11, %xmm0
     ed6:	c4 43 7d 19 db 01 	vextractf128	$1, %ymm11, %xmm11
     edc:	c5 fb 58 c1 	vaddsd	%xmm1, %xmm0, %xmm0
     ee0:	8b 4c 24 50 	movl	80(%rsp), %ecx
; result[jj*ny+ii] = sum;
     ee4:	48 8b 74 24 70 	movq	112(%rsp), %rsi
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     ee9:	c5 a3 58 c0 	vaddsd	%xmm0, %xmm11, %xmm0
     eed:	c4 41 21 15 db 	vunpckhpd	%xmm11, %xmm11, %xmm11
; result[jj*ny+ii] = sum;
     ef2:	8d 54 0b ff 	leal	-1(%rbx,%rcx), %edx
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     ef6:	c5 a3 58 c0 	vaddsd	%xmm0, %xmm11, %xmm0
; result[jj*ny+ii] = sum;
     efa:	48 63 d2 	movslq	%edx, %rdx
     efd:	c5 e8 57 d2 	vxorps	%xmm2, %xmm2, %xmm2
     f01:	c5 eb 5a d0 	vcvtsd2ss	%xmm0, %xmm2, %xmm2
     f05:	c5 fa 11 14 96 	vmovss	%xmm2, (%rsi,%rdx,4)
     f0a:	e9 2e fb ff ff 	jmp	-1234 <__Z9correlateiiPKfPf._omp_fn.3+0x34d>
; block[id][jd] = double4_0;
     f0f:	c5 d9 57 e4 	vxorpd	%xmm4, %xmm4, %xmm4
     f13:	c5 7d 28 c4 	vmovapd	%ymm4, %ymm8
     f17:	c5 7d 28 e4 	vmovapd	%ymm4, %ymm12
     f1b:	c5 fd 28 ec 	vmovapd	%ymm4, %ymm5
     f1f:	c5 7d 28 cc 	vmovapd	%ymm4, %ymm9
     f23:	c5 7d 28 ec 	vmovapd	%ymm4, %ymm13
     f27:	c5 fd 28 f4 	vmovapd	%ymm4, %ymm6
     f2b:	c5 7d 28 d4 	vmovapd	%ymm4, %ymm10
     f2f:	c5 7d 28 f4 	vmovapd	%ymm4, %ymm14
     f33:	c5 fd 28 fc 	vmovapd	%ymm4, %ymm7
     f37:	c5 7d 28 dc 	vmovapd	%ymm4, %ymm11
     f3b:	c5 7d 28 fc 	vmovapd	%ymm4, %ymm15
     f3f:	e9 6a fa ff ff 	jmp	-1430 <__Z9correlateiiPKfPf._omp_fn.3+0x2be>
     f44:	66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
     f4e:	66 90 	nop

__Z10preprocessPKfiiiii:
; const int nb, const int na, const int ncd) {
     f50:	41 57 	pushq	%r15
     f52:	41 89 d7 	movl	%edx, %r15d
; double4_t* data = double4_alloc(ncd*na);
     f55:	44 89 ca 	movl	%r9d, %edx
; const int nb, const int na, const int ncd) {
     f58:	41 56 	pushq	%r14
; double4_t* data = double4_alloc(ncd*na);
     f5a:	41 0f af d0 	imull	%r8d, %edx
; const int nb, const int na, const int ncd) {
     f5e:	41 89 ce 	movl	%ecx, %r14d
     f61:	41 55 	pushq	%r13
; double4_t* data = double4_alloc(ncd*na);
     f63:	48 63 d2 	movslq	%edx, %rdx
; return static_cast<double4_t*>(aligned_malloc(sizeof(double4_t) * n));
     f66:	48 c1 e2 05 	shlq	$5, %rdx
; const int nb, const int na, const int ncd) {
     f6a:	41 54 	pushq	%r12
     f6c:	41 89 f5 	movl	%esi, %r13d
; if (posix_memalign(&ret, 32, bytes)) {
     f6f:	be 20 00 00 00 	movl	$32, %esi
; const int nb, const int na, const int ncd) {
     f74:	55 	pushq	%rbp
     f75:	44 89 c5 	movl	%r8d, %ebp
     f78:	53 	pushq	%rbx
     f79:	48 83 ec 38 	subq	$56, %rsp
; if (posix_memalign(&ret, 32, bytes)) {
     f7d:	48 8d 5c 24 10 	leaq	16(%rsp), %rbx
; const int nb, const int na, const int ncd) {
     f82:	48 89 7c 24 08 	movq	%rdi, 8(%rsp)
; if (posix_memalign(&ret, 32, bytes)) {
     f87:	48 89 df 	movq	%rbx, %rdi
; double4_t* data = double4_alloc(ncd*na);
     f8a:	44 89 4c 24 04 	movl	%r9d, 4(%rsp)
; void* ret = nullptr;
     f8f:	48 c7 44 24 10 00 00 00 00 	movq	$0, 16(%rsp)
; if (posix_memalign(&ret, 32, bytes)) {
     f98:	e8 00 00 00 00 	callq	0 <__Z10preprocessPKfiiiii+0x4d>
     f9d:	85 c0 	testl	%eax, %eax
     f9f:	44 8b 4c 24 04 	movl	4(%rsp), %r9d
     fa4:	4c 8b 54 24 08 	movq	8(%rsp), %r10
     fa9:	0f 85 b1 00 00 00 	jne	177 <__Z10preprocessPKfiiiii+0x110>
; return ret;
     faf:	4c 8b 64 24 10 	movq	16(%rsp), %r12
     fb4:	48 89 de 	movq	%rbx, %rsi
     fb7:	31 c9 	xorl	%ecx, %ecx
     fb9:	31 d2 	xorl	%edx, %edx
     fbb:	48 8d 3d 00 00 00 00 	leaq	(%rip), %rdi
; #pragma omp parallel for
     fc2:	4c 89 54 24 10 	movq	%r10, 16(%rsp)
     fc7:	44 89 4c 24 04 	movl	%r9d, 4(%rsp)
     fcc:	4c 89 64 24 18 	movq	%r12, 24(%rsp)
     fd1:	89 6c 24 2c 	movl	%ebp, 44(%rsp)
     fd5:	44 89 74 24 28 	movl	%r14d, 40(%rsp)
     fda:	44 89 7c 24 24 	movl	%r15d, 36(%rsp)
     fdf:	44 89 6c 24 20 	movl	%r13d, 32(%rsp)
     fe4:	e8 00 00 00 00 	callq	0 <__Z10preprocessPKfiiiii+0x99>
; #pragma omp parallel for
     fe9:	44 8b 4c 24 04 	movl	4(%rsp), %r9d
     fee:	48 89 de 	movq	%rbx, %rsi
     ff1:	31 c9 	xorl	%ecx, %ecx
     ff3:	31 d2 	xorl	%edx, %edx
     ff5:	48 8d 3d 00 00 00 00 	leaq	(%rip), %rdi
     ffc:	4c 89 64 24 10 	movq	%r12, 16(%rsp)
    1001:	44 89 4c 24 24 	movl	%r9d, 36(%rsp)
    1006:	89 6c 24 20 	movl	%ebp, 32(%rsp)
    100a:	44 89 74 24 1c 	movl	%r14d, 28(%rsp)
    100f:	44 89 6c 24 18 	movl	%r13d, 24(%rsp)
    1014:	e8 00 00 00 00 	callq	0 <__Z10preprocessPKfiiiii+0xc9>
; #pragma omp parallel for
    1019:	48 89 de 	movq	%rbx, %rsi
    101c:	31 c9 	xorl	%ecx, %ecx
    101e:	31 d2 	xorl	%edx, %edx
    1020:	48 8d 3d 00 00 00 00 	leaq	(%rip), %rdi
    1027:	4c 89 64 24 10 	movq	%r12, 16(%rsp)
    102c:	89 6c 24 24 	movl	%ebp, 36(%rsp)
    1030:	44 89 74 24 20 	movl	%r14d, 32(%rsp)
    1035:	44 89 7c 24 1c 	movl	%r15d, 28(%rsp)
    103a:	44 89 6c 24 18 	movl	%r13d, 24(%rsp)
    103f:	e8 00 00 00 00 	callq	0 <__Z10preprocessPKfiiiii+0xf4>
; return data;
    1044:	48 83 c4 38 	addq	$56, %rsp
; }
    1048:	5b 	popq	%rbx
    1049:	5d 	popq	%rbp
    104a:	4c 89 e0 	movq	%r12, %rax
    104d:	41 5c 	popq	%r12
    104f:	41 5d 	popq	%r13
    1051:	41 5e 	popq	%r14
    1053:	41 5f 	popq	%r15
    1055:	c3 	retq
    1056:	66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
; return nullptr;
    1060:	45 31 e4 	xorl	%r12d, %r12d
    1063:	e9 4c ff ff ff 	jmp	-180 <__Z10preprocessPKfiiiii+0x64>
    1068:	0f 1f 84 00 00 00 00 00 	nopl	(%rax,%rax)

__Z9correlateiiPKfPf:
; void correlate(int ny, int nx, const float* data_, float* result) {
    1070:	41 56 	pushq	%r14
; const int na = (nx + nb - 1) / nb;
    1072:	89 f0 	movl	%esi, %eax
    1074:	41 b9 56 55 55 55 	movl	$1431655766, %r9d
; void correlate(int ny, int nx, const float* data_, float* result) {
    107a:	41 55 	pushq	%r13
    107c:	49 89 cd 	movq	%rcx, %r13
    107f:	41 54 	pushq	%r12
; const int na = (nx + nb - 1) / nb;
    1081:	44 8d 66 06 	leal	6(%rsi), %r12d
; void correlate(int ny, int nx, const float* data_, float* result) {
    1085:	55 	pushq	%rbp
    1086:	89 fd 	movl	%edi, %ebp
    1088:	48 89 d7 	movq	%rdx, %rdi
    108b:	53 	pushq	%rbx
; if (n%a==0 && n%b==0) return n; else n++;
    108c:	ba 56 55 55 55 	movl	$1431655766, %edx
    1091:	89 e9 	movl	%ebp, %ecx
; void correlate(int ny, int nx, const float* data_, float* result) {
    1093:	48 83 ec 20 	subq	$32, %rsp
; const int na = (nx + nb - 1) / nb;
    1097:	83 c0 03 	addl	$3, %eax
    109a:	44 0f 49 e0 	cmovnsl	%eax, %r12d
; if (n%a==0 && n%b==0) return n; else n++;
    109e:	89 e8 	movl	%ebp, %eax
    10a0:	f7 ea 	imull	%edx
    10a2:	89 e8 	movl	%ebp, %eax
    10a4:	c1 f8 1f 	sarl	$31, %eax
    10a7:	29 c2 	subl	%eax, %edx
    10a9:	8d 14 52 	leal	(%rdx,%rdx,2), %edx
    10ac:	c1 e8 1e 	shrl	$30, %eax
    10af:	29 d1 	subl	%edx, %ecx
    10b1:	89 c2 	movl	%eax, %edx
    10b3:	01 e8 	addl	%ebp, %eax
    10b5:	83 e0 03 	andl	$3, %eax
    10b8:	29 d0 	subl	%edx, %eax
; const int na = (nx + nb - 1) / nb;
    10ba:	41 c1 fc 02 	sarl	$2, %r12d
; const int ncd = div(ny, V, H);
    10be:	09 c1 	orl	%eax, %ecx
; if (n%a==0 && n%b==0) return n; else n++;
    10c0:	89 eb 	movl	%ebp, %ebx
    10c2:	74 36 	je	54 <__Z9correlateiiPKfPf+0x8a>
    10c4:	66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
    10ce:	66 90 	nop
    10d0:	ff c3 	incl	%ebx
; while (true) {
    10d2:	41 89 d8 	movl	%ebx, %r8d
; if (n%a==0 && n%b==0) return n; else n++;
    10d5:	41 c1 f8 1f 	sarl	$31, %r8d
    10d9:	44 89 c0 	movl	%r8d, %eax
    10dc:	c1 e8 1e 	shrl	$30, %eax
    10df:	8d 0c 03 	leal	(%rbx,%rax), %ecx
    10e2:	83 e1 03 	andl	$3, %ecx
    10e5:	29 c1 	subl	%eax, %ecx
    10e7:	89 d8 	movl	%ebx, %eax
    10e9:	41 f7 e9 	imull	%r9d
    10ec:	44 29 c2 	subl	%r8d, %edx
    10ef:	8d 04 52 	leal	(%rdx,%rdx,2), %eax
    10f2:	89 da 	movl	%ebx, %edx
    10f4:	29 c2 	subl	%eax, %edx
    10f6:	09 d1 	orl	%edx, %ecx
    10f8:	75 d6 	jne	-42 <__Z9correlateiiPKfPf+0x60>
    10fa:	41 89 d9 	movl	%ebx, %r9d
; double4_t* data = preprocess(data_, ny, nx, nb, na, ncd);
    10fd:	45 89 e0 	movl	%r12d, %r8d
    1100:	89 f2 	movl	%esi, %edx
    1102:	b9 04 00 00 00 	movl	$4, %ecx
    1107:	89 ee 	movl	%ebp, %esi
    1109:	e8 00 00 00 00 	callq	0 <__Z9correlateiiPKfPf+0x9e>
    110e:	49 89 c6 	movq	%rax, %r14
; #pragma omp parallel for schedule(dynamic,1)
    1111:	48 89 44 24 08 	movq	%rax, 8(%rsp)
; const int ncH = ncd / H;
    1116:	ba 56 55 55 55 	movl	$1431655766, %edx
    111b:	89 d8 	movl	%ebx, %eax
    111d:	f7 ea 	imull	%edx
    111f:	89 d8 	movl	%ebx, %eax
    1121:	c1 f8 1f 	sarl	$31, %eax
    1124:	29 c2 	subl	%eax, %edx
; const int ncV = ncd / V;
    1126:	85 db 	testl	%ebx, %ebx
    1128:	8d 43 03 	leal	3(%rbx), %eax
    112b:	0f 48 d8 	cmovsl	%eax, %ebx
; const int ncH = ncd / H;
    112e:	89 54 24 1c 	movl	%edx, 28(%rsp)
    1132:	48 89 e6 	movq	%rsp, %rsi
; const int ncV = ncd / V;
    1135:	c1 fb 02 	sarl	$2, %ebx
    1138:	31 c9 	xorl	%ecx, %ecx
    113a:	31 d2 	xorl	%edx, %edx
    113c:	48 8d 3d 00 00 00 00 	leaq	(%rip), %rdi
; #pragma omp parallel for schedule(dynamic,1)
    1143:	89 5c 24 18 	movl	%ebx, 24(%rsp)
    1147:	44 89 64 24 14 	movl	%r12d, 20(%rsp)
    114c:	4c 89 2c 24 	movq	%r13, (%rsp)
    1150:	89 6c 24 10 	movl	%ebp, 16(%rsp)
    1154:	e8 00 00 00 00 	callq	0 <__Z9correlateiiPKfPf+0xe9>
; free(data);
    1159:	4c 89 f7 	movq	%r14, %rdi
    115c:	e8 00 00 00 00 	callq	0 <__Z9correlateiiPKfPf+0xf1>
; }
    1161:	48 83 c4 20 	addq	$32, %rsp
    1165:	5b 	popq	%rbx
    1166:	5d 	popq	%rbp
    1167:	41 5c 	popq	%r12
    1169:	41 5d 	popq	%r13
    116b:	41 5e 	popq	%r14
    116d:	c3 	retq
Disassembly of section __TEXT,__text_startup:
__GLOBAL__sub_I_cp.cc:
    1170:	48 83 ec 08 	subq	$8, %rsp
; static ios_base::Init __ioinit;
    1174:	48 8d 3d 00 00 00 00 	leaq	(%rip), %rdi
    117b:	e8 00 00 00 00 	callq	0 <__GLOBAL__sub_I_cp.cc+0x10>
    1180:	48 8b 3d 00 00 00 00 	movq	(%rip), %rdi
    1187:	48 8d 15 00 00 00 00 	leaq	(%rip), %rdx
    118e:	48 8d 35 00 00 00 00 	leaq	(%rip), %rsi
; }
    1195:	48 83 c4 08 	addq	$8, %rsp
; static ios_base::Init __ioinit;
    1199:	e9 00 00 00 00 	jmp	0 <__GLOBAL__sub_I_cp.cc+0x2e>
