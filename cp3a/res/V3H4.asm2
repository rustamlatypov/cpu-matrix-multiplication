
cp.o:	file format Mach-O 64-bit x86-64

Disassembly of section __TEXT,__text:
__Z10preprocessPKfiiiii._omp_fn.1:
; #pragma omp parallel for
       0:	41 57 	pushq	%r15
       2:	41 56 	pushq	%r14
       4:	41 55 	pushq	%r13
       6:	41 54 	pushq	%r12
       8:	55 	pushq	%rbp
       9:	53 	pushq	%rbx
       a:	48 89 fb 	movq	%rdi, %rbx
       d:	48 83 ec 28 	subq	$40, %rsp
      11:	44 8b 6f 08 	movl	8(%rdi), %r13d
      15:	e8 00 00 00 00 	callq	0 <__Z10preprocessPKfiiiii._omp_fn.1+0x1a>
      1a:	89 c5 	movl	%eax, %ebp
      1c:	e8 00 00 00 00 	callq	0 <__Z10preprocessPKfiiiii._omp_fn.1+0x21>
      21:	41 89 c4 	movl	%eax, %r12d
      24:	8b 43 14 	movl	20(%rbx), %eax
      27:	44 29 e8 	subl	%r13d, %eax
      2a:	99 	cltd
      2b:	f7 fd 	idivl	%ebp
      2d:	41 39 d4 	cmpl	%edx, %r12d
      30:	0f 8c af 00 00 00 	jl	175 <__Z10preprocessPKfiiiii._omp_fn.1+0xe5>
      36:	44 0f af e0 	imull	%eax, %r12d
      3a:	41 01 d4 	addl	%edx, %r12d
      3d:	44 01 e0 	addl	%r12d, %eax
      40:	41 39 c4 	cmpl	%eax, %r12d
      43:	0f 8d 8d 00 00 00 	jge	141 <__Z10preprocessPKfiiiii._omp_fn.1+0xd6>
      49:	44 8b 73 10 	movl	16(%rbx), %r14d
      4d:	44 01 e8 	addl	%r13d, %eax
      50:	4c 8b 3b 	movq	(%rbx), %r15
      53:	8b 53 0c 	movl	12(%rbx), %edx
      56:	45 01 ec 	addl	%r13d, %r12d
      59:	89 44 24 0c 	movl	%eax, 12(%rsp)
      5d:	45 85 f6 	testl	%r14d, %r14d
      60:	7e 74 	jle	116 <__Z10preprocessPKfiiiii._omp_fn.1+0xd6>
      62:	85 d2 	testl	%edx, %edx
      64:	7e 70 	jle	112 <__Z10preprocessPKfiiiii._omp_fn.1+0xd6>
; data[na*j + i][k] = 0;
      66:	8d 42 ff 	leal	-1(%rdx), %eax
      69:	48 8d 2c c5 08 00 00 00 	leaq	8(,%rax,8), %rbp
      71:	49 8d 47 20 	leaq	32(%r15), %rax
      75:	45 89 e5 	movl	%r12d, %r13d
      78:	48 89 44 24 18 	movq	%rax, 24(%rsp)
      7d:	41 8d 46 ff 	leal	-1(%r14), %eax
      81:	45 0f af ee 	imull	%r14d, %r13d
      85:	48 89 44 24 10 	movq	%rax, 16(%rsp)
      8a:	66 0f 1f 44 00 00 	nopw	(%rax,%rax)
; for (int j = ny; j < ncd; j++) {
      90:	48 8b 74 24 10 	movq	16(%rsp), %rsi
; for (int i = 0; i < na; i++) {
      95:	49 63 c5 	movslq	%r13d, %rax
      98:	48 89 c1 	movq	%rax, %rcx
      9b:	48 8d 1c 06 	leaq	(%rsi,%rax), %rbx
      9f:	48 c1 e1 05 	shlq	$5, %rcx
      a3:	48 c1 e3 05 	shlq	$5, %rbx
      a7:	4c 01 f9 	addq	%r15, %rcx
      aa:	48 03 5c 24 18 	addq	24(%rsp), %rbx
      af:	90 	nop
      b0:	48 89 cf 	movq	%rcx, %rdi
      b3:	48 89 ea 	movq	%rbp, %rdx
      b6:	31 f6 	xorl	%esi, %esi
      b8:	e8 00 00 00 00 	callq	0 <__Z10preprocessPKfiiiii._omp_fn.1+0xbd>
      bd:	48 89 c1 	movq	%rax, %rcx
      c0:	48 83 c1 20 	addq	$32, %rcx
      c4:	48 39 d9 	cmpq	%rbx, %rcx
      c7:	75 e7 	jne	-25 <__Z10preprocessPKfiiiii._omp_fn.1+0xb0>
      c9:	41 ff c4 	incl	%r12d
      cc:	45 01 f5 	addl	%r14d, %r13d
      cf:	44 39 64 24 0c 	cmpl	%r12d, 12(%rsp)
      d4:	7f ba 	jg	-70 <__Z10preprocessPKfiiiii._omp_fn.1+0x90>
; #pragma omp parallel for
      d6:	48 83 c4 28 	addq	$40, %rsp
      da:	5b 	popq	%rbx
      db:	5d 	popq	%rbp
      dc:	41 5c 	popq	%r12
      de:	41 5d 	popq	%r13
      e0:	41 5e 	popq	%r14
      e2:	41 5f 	popq	%r15
      e4:	c3 	retq
      e5:	ff c0 	incl	%eax
      e7:	31 d2 	xorl	%edx, %edx
      e9:	e9 48 ff ff ff 	jmp	-184 <__Z10preprocessPKfiiiii._omp_fn.1+0x36>
      ee:	66 90 	nop

__Z10preprocessPKfiiiii._omp_fn.0:
; #pragma omp parallel for
      f0:	41 57 	pushq	%r15
      f2:	41 56 	pushq	%r14
      f4:	41 55 	pushq	%r13
      f6:	41 54 	pushq	%r12
      f8:	49 89 fc 	movq	%rdi, %r12
      fb:	55 	pushq	%rbp
      fc:	53 	pushq	%rbx
      fd:	48 83 ec 18 	subq	$24, %rsp
     101:	e8 00 00 00 00 	callq	0 <__Z10preprocessPKfiiiii._omp_fn.0+0x16>
     106:	89 c5 	movl	%eax, %ebp
     108:	e8 00 00 00 00 	callq	0 <__Z10preprocessPKfiiiii._omp_fn.0+0x1d>
     10d:	89 c3 	movl	%eax, %ebx
     10f:	41 8b 44 24 10 	movl	16(%r12), %eax
     114:	99 	cltd
     115:	f7 fd 	idivl	%ebp
     117:	39 d3 	cmpl	%edx, %ebx
     119:	0f 8c f3 01 00 00 	jl	499 <__Z10preprocessPKfiiiii._omp_fn.0+0x222>
     11f:	0f af d8 	imull	%eax, %ebx
     122:	01 d3 	addl	%edx, %ebx
     124:	8d 2c 18 	leal	(%rax,%rbx), %ebp
     127:	39 eb 	cmpl	%ebp, %ebx
     129:	0f 8d a2 01 00 00 	jge	418 <__Z10preprocessPKfiiiii._omp_fn.0+0x1e1>
     12f:	45 8b 74 24 1c 	movl	28(%r12), %r14d
     134:	4d 8b 7c 24 08 	movq	8(%r12), %r15
     139:	41 8b 4c 24 18 	movl	24(%r12), %ecx
     13e:	41 8b 74 24 14 	movl	20(%r12), %esi
     143:	4d 8b 0c 24 	movq	(%r12), %r9
     147:	45 85 f6 	testl	%r14d, %r14d
     14a:	0f 8e 81 01 00 00 	jle	385 <__Z10preprocessPKfiiiii._omp_fn.0+0x1e1>
     150:	85 c9 	testl	%ecx, %ecx
     152:	0f 8e 79 01 00 00 	jle	377 <__Z10preprocessPKfiiiii._omp_fn.0+0x1e1>
     158:	49 8d 47 20 	leaq	32(%r15), %rax
     15c:	45 89 f5 	movl	%r14d, %r13d
     15f:	41 89 dc 	movl	%ebx, %r12d
     162:	48 89 44 24 08 	movq	%rax, 8(%rsp)
     167:	41 8d 46 ff 	leal	-1(%r14), %eax
     16b:	44 0f af eb 	imull	%ebx, %r13d
     16f:	44 0f af e6 	imull	%esi, %r12d
     173:	48 89 04 24 	movq	%rax, (%rsp)
; data[na*j + i][k] = pos < nx ? data_[nx*j + pos] : 0;
     177:	c5 f1 57 c9 	vxorpd	%xmm1, %xmm1, %xmm1
     17b:	c5 e9 57 d2 	vxorpd	%xmm2, %xmm2, %xmm2
     17f:	c5 e1 57 db 	vxorpd	%xmm3, %xmm3, %xmm3
     183:	c5 d9 57 e4 	vxorpd	%xmm4, %xmm4, %xmm4
     187:	c5 d1 57 ed 	vxorpd	%xmm5, %xmm5, %xmm5
     18b:	0f 1f 44 00 00 	nopl	(%rax,%rax)
; for (int j = 0; j < ny; j++) {
     190:	48 8b 3c 24 	movq	(%rsp), %rdi
; for (int i = 0; i < na; i++) {
     194:	49 63 d5 	movslq	%r13d, %rdx
     197:	4c 8d 14 17 	leaq	(%rdi,%rdx), %r10
     19b:	48 89 d0 	movq	%rdx, %rax
     19e:	48 c1 e0 05 	shlq	$5, %rax
     1a2:	49 c1 e2 05 	shlq	$5, %r10
     1a6:	4c 01 f8 	addq	%r15, %rax
     1a9:	4c 03 54 24 08 	addq	8(%rsp), %r10
; #pragma omp parallel for
     1ae:	44 89 e7 	movl	%r12d, %edi
     1b1:	31 d2 	xorl	%edx, %edx
     1b3:	66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
     1bd:	0f 1f 00 	nopl	(%rax)
; int pos = i * nb + k;
     1c0:	c5 f9 28 c1 	vmovapd	%xmm1, %xmm0
; data[na*j + i][k] = pos < nx ? data_[nx*j + pos] : 0;
     1c4:	39 d6 	cmpl	%edx, %esi
     1c6:	7e 0d 	jle	13 <__Z10preprocessPKfiiiii._omp_fn.0+0xe5>
     1c8:	4c 63 c7 	movslq	%edi, %r8
     1cb:	c5 f9 57 c0 	vxorpd	%xmm0, %xmm0, %xmm0
     1cf:	c4 81 7a 5a 04 81 	vcvtss2sd	(%r9,%r8,4), %xmm0, %xmm0
     1d5:	c5 fb 11 00 	vmovsd	%xmm0, (%rax)
; for (int k = 0; k < nb; k++) {
     1d9:	83 f9 01 	cmpl	$1, %ecx
     1dc:	0f 84 ce 00 00 00 	je	206 <__Z10preprocessPKfiiiii._omp_fn.0+0x1c0>
; int pos = i * nb + k;
     1e2:	44 8d 42 01 	leal	1(%rdx), %r8d
; data[na*j + i][k] = pos < nx ? data_[nx*j + pos] : 0;
     1e6:	c5 f9 28 c2 	vmovapd	%xmm2, %xmm0
     1ea:	44 39 c6 	cmpl	%r8d, %esi
     1ed:	7e 11 	jle	17 <__Z10preprocessPKfiiiii._omp_fn.0+0x110>
     1ef:	44 8d 47 01 	leal	1(%rdi), %r8d
     1f3:	4d 63 c0 	movslq	%r8d, %r8
     1f6:	c5 f9 57 c0 	vxorpd	%xmm0, %xmm0, %xmm0
     1fa:	c4 81 7a 5a 04 81 	vcvtss2sd	(%r9,%r8,4), %xmm0, %xmm0
     200:	c5 fb 11 40 08 	vmovsd	%xmm0, 8(%rax)
; for (int k = 0; k < nb; k++) {
     205:	83 f9 02 	cmpl	$2, %ecx
     208:	0f 84 a2 00 00 00 	je	162 <__Z10preprocessPKfiiiii._omp_fn.0+0x1c0>
; int pos = i * nb + k;
     20e:	44 8d 42 02 	leal	2(%rdx), %r8d
; data[na*j + i][k] = pos < nx ? data_[nx*j + pos] : 0;
     212:	c5 f9 28 c3 	vmovapd	%xmm3, %xmm0
     216:	44 39 c6 	cmpl	%r8d, %esi
     219:	7e 11 	jle	17 <__Z10preprocessPKfiiiii._omp_fn.0+0x13c>
     21b:	44 8d 47 02 	leal	2(%rdi), %r8d
     21f:	4d 63 c0 	movslq	%r8d, %r8
     222:	c5 f9 57 c0 	vxorpd	%xmm0, %xmm0, %xmm0
     226:	c4 81 7a 5a 04 81 	vcvtss2sd	(%r9,%r8,4), %xmm0, %xmm0
     22c:	c5 fb 11 40 10 	vmovsd	%xmm0, 16(%rax)
; for (int k = 0; k < nb; k++) {
     231:	83 f9 03 	cmpl	$3, %ecx
     234:	74 7a 	je	122 <__Z10preprocessPKfiiiii._omp_fn.0+0x1c0>
; int pos = i * nb + k;
     236:	44 8d 42 03 	leal	3(%rdx), %r8d
; data[na*j + i][k] = pos < nx ? data_[nx*j + pos] : 0;
     23a:	c5 f9 28 c4 	vmovapd	%xmm4, %xmm0
     23e:	44 39 c6 	cmpl	%r8d, %esi
     241:	7e 11 	jle	17 <__Z10preprocessPKfiiiii._omp_fn.0+0x164>
     243:	44 8d 47 03 	leal	3(%rdi), %r8d
     247:	4d 63 c0 	movslq	%r8d, %r8
     24a:	c5 f9 57 c0 	vxorpd	%xmm0, %xmm0, %xmm0
     24e:	c4 81 7a 5a 04 81 	vcvtss2sd	(%r9,%r8,4), %xmm0, %xmm0
     254:	c5 fb 11 40 18 	vmovsd	%xmm0, 24(%rax)
; for (int k = 0; k < nb; k++) {
     259:	83 f9 04 	cmpl	$4, %ecx
     25c:	74 52 	je	82 <__Z10preprocessPKfiiiii._omp_fn.0+0x1c0>
; int pos = i * nb + k;
     25e:	44 8d 42 04 	leal	4(%rdx), %r8d
; data[na*j + i][k] = pos < nx ? data_[nx*j + pos] : 0;
     262:	c5 f9 28 c5 	vmovapd	%xmm5, %xmm0
     266:	44 39 c6 	cmpl	%r8d, %esi
     269:	7e 11 	jle	17 <__Z10preprocessPKfiiiii._omp_fn.0+0x18c>
     26b:	44 8d 47 04 	leal	4(%rdi), %r8d
     26f:	4d 63 c0 	movslq	%r8d, %r8
     272:	c5 f9 57 c0 	vxorpd	%xmm0, %xmm0, %xmm0
     276:	c4 81 7a 5a 04 81 	vcvtss2sd	(%r9,%r8,4), %xmm0, %xmm0
     27c:	c5 fb 11 40 20 	vmovsd	%xmm0, 32(%rax)
; for (int k = 0; k < nb; k++) {
     281:	83 f9 05 	cmpl	$5, %ecx
     284:	74 2a 	je	42 <__Z10preprocessPKfiiiii._omp_fn.0+0x1c0>
     286:	41 b8 05 00 00 00 	movl	$5, %r8d
; int pos = i * nb + k;
     28c:	46 8d 1c 02 	leal	(%rdx,%r8), %r11d
; data[na*j + i][k] = pos < nx ? data_[nx*j + pos] : 0;
     290:	44 39 de 	cmpl	%r11d, %esi
     293:	7f 4b 	jg	75 <__Z10preprocessPKfiiiii._omp_fn.0+0x1f0>
     295:	4a c7 04 c0 00 00 00 00 	movq	$0, (%rax,%r8,8)
     29d:	49 ff c0 	incq	%r8
; for (int k = 0; k < nb; k++) {
     2a0:	44 39 c1 	cmpl	%r8d, %ecx
     2a3:	7f e7 	jg	-25 <__Z10preprocessPKfiiiii._omp_fn.0+0x19c>
     2a5:	66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
     2af:	90 	nop
     2b0:	48 83 c0 20 	addq	$32, %rax
     2b4:	01 ca 	addl	%ecx, %edx
     2b6:	01 cf 	addl	%ecx, %edi
; for (int i = 0; i < na; i++) {
     2b8:	4c 39 d0 	cmpq	%r10, %rax
     2bb:	0f 85 ff fe ff ff 	jne	-257 <__Z10preprocessPKfiiiii._omp_fn.0+0xd0>
     2c1:	ff c3 	incl	%ebx
     2c3:	45 01 f5 	addl	%r14d, %r13d
     2c6:	41 01 f4 	addl	%esi, %r12d
     2c9:	39 dd 	cmpl	%ebx, %ebp
     2cb:	0f 85 bf fe ff ff 	jne	-321 <__Z10preprocessPKfiiiii._omp_fn.0+0xa0>
; #pragma omp parallel for
     2d1:	48 83 c4 18 	addq	$24, %rsp
     2d5:	5b 	popq	%rbx
     2d6:	5d 	popq	%rbp
     2d7:	41 5c 	popq	%r12
     2d9:	41 5d 	popq	%r13
     2db:	41 5e 	popq	%r14
     2dd:	41 5f 	popq	%r15
     2df:	c3 	retq
; data[na*j + i][k] = pos < nx ? data_[nx*j + pos] : 0;
     2e0:	46 8d 1c 07 	leal	(%rdi,%r8), %r11d
     2e4:	4d 63 db 	movslq	%r11d, %r11
     2e7:	c5 f9 57 c0 	vxorpd	%xmm0, %xmm0, %xmm0
     2eb:	c4 81 7a 5a 04 99 	vcvtss2sd	(%r9,%r11,4), %xmm0, %xmm0
     2f1:	c4 a1 7b 11 04 c0 	vmovsd	%xmm0, (%rax,%r8,8)
     2f7:	49 ff c0 	incq	%r8
; for (int k = 0; k < nb; k++) {
     2fa:	44 39 c1 	cmpl	%r8d, %ecx
     2fd:	7f 8d 	jg	-115 <__Z10preprocessPKfiiiii._omp_fn.0+0x19c>
     2ff:	48 83 c0 20 	addq	$32, %rax
     303:	01 ca 	addl	%ecx, %edx
     305:	01 cf 	addl	%ecx, %edi
; for (int i = 0; i < na; i++) {
     307:	4c 39 d0 	cmpq	%r10, %rax
     30a:	0f 85 b0 fe ff ff 	jne	-336 <__Z10preprocessPKfiiiii._omp_fn.0+0xd0>
     310:	eb af 	jmp	-81 <__Z10preprocessPKfiiiii._omp_fn.0+0x1d1>
     312:	ff c0 	incl	%eax
; #pragma omp parallel for
     314:	31 d2 	xorl	%edx, %edx
     316:	e9 04 fe ff ff 	jmp	-508 <__Z10preprocessPKfiiiii._omp_fn.0+0x2f>
     31b:	0f 1f 44 00 00 	nopl	(%rax,%rax)

__Z10preprocessPKfiiiii._omp_fn.2:
; #pragma omp parallel for
     320:	4c 8d 54 24 08 	leaq	8(%rsp), %r10
     325:	48 83 e4 e0 	andq	$-32, %rsp
     329:	41 ff 72 f8 	pushq	-8(%r10)
     32d:	55 	pushq	%rbp
     32e:	48 89 e5 	movq	%rsp, %rbp
     331:	41 57 	pushq	%r15
     333:	41 56 	pushq	%r14
     335:	41 55 	pushq	%r13
     337:	41 54 	pushq	%r12
     339:	41 52 	pushq	%r10
     33b:	53 	pushq	%rbx
     33c:	48 89 fb 	movq	%rdi, %rbx
     33f:	48 83 c4 80 	addq	$-128, %rsp
     343:	e8 00 00 00 00 	callq	0 <__Z10preprocessPKfiiiii._omp_fn.2+0x28>
     348:	41 89 c4 	movl	%eax, %r12d
     34b:	e8 00 00 00 00 	callq	0 <__Z10preprocessPKfiiiii._omp_fn.2+0x30>
     350:	89 c6 	movl	%eax, %esi
     352:	8b 43 08 	movl	8(%rbx), %eax
     355:	99 	cltd
     356:	41 f7 fc 	idivl	%r12d
     359:	39 d6 	cmpl	%edx, %esi
     35b:	0f 8c 28 03 00 00 	jl	808 <__Z10preprocessPKfiiiii._omp_fn.2+0x369>
     361:	0f af f0 	imull	%eax, %esi
     364:	01 d6 	addl	%edx, %esi
     366:	44 8d 04 30 	leal	(%rax,%rsi), %r8d
     36a:	44 39 c6 	cmpl	%r8d, %esi
     36d:	0f 8d aa 02 00 00 	jge	682 <__Z10preprocessPKfiiiii._omp_fn.2+0x2fd>
     373:	4c 63 7b 14 	movslq	20(%rbx), %r15
     377:	44 8b 4b 0c 	movl	12(%rbx), %r9d
     37b:	4c 89 f8 	movq	%r15, %rax
     37e:	44 8b 6b 10 	movl	16(%rbx), %r13d
     382:	c5 d9 57 e4 	vxorpd	%xmm4, %xmm4, %xmm4
     386:	48 8b 13 	movq	(%rbx), %rdx
; int lim = nb - (na*nb-nx);
     389:	44 89 f9 	movl	%r15d, %ecx
     38c:	44 89 cb 	movl	%r9d, %ebx
     38f:	c4 c1 5b 2a e1 	vcvtsi2sdl	%r9d, %xmm4, %xmm4
     394:	41 89 c1 	movl	%eax, %r9d
     397:	41 0f af cd 	imull	%r13d, %ecx
     39b:	44 0f af ce 	imull	%esi, %r9d
; for (int i = 0; i < na-1; i++) {
     39f:	41 8d 7f ff 	leal	-1(%r15), %edi
; int lim = nb - (na*nb-nx);
     3a3:	29 cb 	subl	%ecx, %ebx
     3a5:	4d 63 c9 	movslq	%r9d, %r9
     3a8:	89 d9 	movl	%ebx, %ecx
     3aa:	4d 89 ce 	movq	%r9, %r14
     3ad:	89 fb 	movl	%edi, %ebx
     3af:	44 8d 60 fe 	leal	-2(%rax), %r12d
     3b3:	49 c1 e6 05 	shlq	$5, %r14
     3b7:	4c 01 cb 	addq	%r9, %rbx
     3ba:	4d 01 cc 	addq	%r9, %r12
     3bd:	49 01 d6 	addq	%rdx, %r14
     3c0:	48 c1 e3 05 	shlq	$5, %rbx
     3c4:	48 83 c2 20 	addq	$32, %rdx
     3c8:	49 c1 e4 05 	shlq	$5, %r12
     3cc:	44 01 e9 	addl	%r13d, %ecx
     3cf:	49 c1 e7 05 	shlq	$5, %r15
     3d3:	48 01 d3 	addq	%rdx, %rbx
     3d6:	49 01 d4 	addq	%rdx, %r12
     3d9:	c5 e1 57 db 	vxorpd	%xmm3, %xmm3, %xmm3
; double4_t avg_v = double4_0;
     3dd:	c5 e9 57 d2 	vxorpd	%xmm2, %xmm2, %xmm2
     3e1:	66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
     3eb:	0f 1f 44 00 00 	nopl	(%rax,%rax)
; for (int j = 0; j < ny; j++) {
     3f0:	4c 89 f2 	movq	%r14, %rdx
; for (int i = 0; i < na; i++) {
     3f3:	c5 f9 57 c0 	vxorpd	%xmm0, %xmm0, %xmm0
     3f7:	85 c0 	testl	%eax, %eax
     3f9:	0f 8e 81 02 00 00 	jle	641 <__Z10preprocessPKfiiiii._omp_fn.2+0x360>
     3ff:	90 	nop
; sum4 += data[j*na+i];
     400:	c5 fd 58 02 	vaddpd	(%rdx), %ymm0, %ymm0
     404:	48 83 c2 20 	addq	$32, %rdx
; for (int i = 0; i < na; i++) {
     408:	48 39 d3 	cmpq	%rdx, %rbx
     40b:	75 f3 	jne	-13 <__Z10preprocessPKfiiiii._omp_fn.2+0xe0>
     40d:	c5 fb 58 cb 	vaddsd	%xmm3, %xmm0, %xmm1
     411:	c5 f9 15 e8 	vunpckhpd	%xmm0, %xmm0, %xmm5
     415:	c4 e3 7d 19 c0 01 	vextractf128	$1, %ymm0, %xmm0
     41b:	c5 f3 58 cd 	vaddsd	%xmm5, %xmm1, %xmm1
     41f:	c5 f3 58 c8 	vaddsd	%xmm0, %xmm1, %xmm1
     423:	c5 f9 15 c0 	vunpckhpd	%xmm0, %xmm0, %xmm0
     427:	c5 f3 58 c0 	vaddsd	%xmm0, %xmm1, %xmm0
; double sum = hsum(sum4);
     42b:	c5 fb 5e cc 	vdivsd	%xmm4, %xmm0, %xmm1
; double4_t avg_v = double4_0;
     42f:	c5 fd 29 55 b0 	vmovapd	%ymm2, -80(%rbp)
; for (int k = 0; k < nb; k++) {
     434:	45 85 ed 	testl	%r13d, %r13d
     437:	7e 57 	jle	87 <__Z10preprocessPKfiiiii._omp_fn.2+0x170>
; avg_v[k] = avg;
     439:	c5 fb 11 4d b0 	vmovsd	%xmm1, -80(%rbp)
; for (int k = 0; k < nb; k++) {
     43e:	41 83 fd 01 	cmpl	$1, %r13d
     442:	74 4c 	je	76 <__Z10preprocessPKfiiiii._omp_fn.2+0x170>
; avg_v[k] = avg;
     444:	c5 fb 11 4d b8 	vmovsd	%xmm1, -72(%rbp)
; for (int k = 0; k < nb; k++) {
     449:	41 83 fd 02 	cmpl	$2, %r13d
     44d:	74 41 	je	65 <__Z10preprocessPKfiiiii._omp_fn.2+0x170>
; avg_v[k] = avg;
     44f:	c5 fb 11 4d c0 	vmovsd	%xmm1, -64(%rbp)
; for (int k = 0; k < nb; k++) {
     454:	41 83 fd 03 	cmpl	$3, %r13d
     458:	74 36 	je	54 <__Z10preprocessPKfiiiii._omp_fn.2+0x170>
; avg_v[k] = avg;
     45a:	c5 fb 11 4d c8 	vmovsd	%xmm1, -56(%rbp)
; for (int k = 0; k < nb; k++) {
     45f:	41 83 fd 04 	cmpl	$4, %r13d
     463:	74 2b 	je	43 <__Z10preprocessPKfiiiii._omp_fn.2+0x170>
; avg_v[k] = avg;
     465:	c5 fb 11 4d d0 	vmovsd	%xmm1, -48(%rbp)
; for (int k = 0; k < nb; k++) {
     46a:	41 83 fd 05 	cmpl	$5, %r13d
     46e:	74 20 	je	32 <__Z10preprocessPKfiiiii._omp_fn.2+0x170>
     470:	ba 05 00 00 00 	movl	$5, %edx
     475:	4c 8d 4d b0 	leaq	-80(%rbp), %r9
; avg_v[k] = avg;
     479:	c4 c1 7b 11 0c d1 	vmovsd	%xmm1, (%r9,%rdx,8)
     47f:	48 ff c2 	incq	%rdx
; for (int k = 0; k < nb; k++) {
     482:	41 39 d5 	cmpl	%edx, %r13d
     485:	7f f2 	jg	-14 <__Z10preprocessPKfiiiii._omp_fn.2+0x159>
     487:	66 0f 1f 84 00 00 00 00 00 	nopw	(%rax,%rax)
; for (int i = 0; i < na-1; i++) {
     490:	85 ff 	testl	%edi, %edi
     492:	7e 22 	jle	34 <__Z10preprocessPKfiiiii._omp_fn.2+0x196>
; data[j*na+i] -= avg_v;
     494:	c5 fd 28 6d b0 	vmovapd	-80(%rbp), %ymm5
     499:	4c 89 f2 	movq	%r14, %rdx
     49c:	0f 1f 40 00 	nopl	(%rax)
     4a0:	c5 fd 28 3a 	vmovapd	(%rdx), %ymm7
     4a4:	48 83 c2 20 	addq	$32, %rdx
     4a8:	c5 c5 5c c5 	vsubpd	%ymm5, %ymm7, %ymm0
     4ac:	c5 fd 29 42 e0 	vmovapd	%ymm0, -32(%rdx)
; for (int i = 0; i < na-1; i++) {
     4b1:	4c 39 e2 	cmpq	%r12, %rdx
     4b4:	75 ea 	jne	-22 <__Z10preprocessPKfiiiii._omp_fn.2+0x180>
; avg_v = double4_0;
     4b6:	c5 fd 29 55 b0 	vmovapd	%ymm2, -80(%rbp)
; int lim = nb - (na*nb-nx);
     4bb:	85 c9 	testl	%ecx, %ecx
; for (int k = 0; k < lim; k++) avg_v[k] = avg;
     4bd:	0f 8e 7d 01 00 00 	jle	381 <__Z10preprocessPKfiiiii._omp_fn.2+0x320>
     4c3:	c5 fb 11 4d b0 	vmovsd	%xmm1, -80(%rbp)
     4c8:	83 f9 01 	cmpl	$1, %ecx
     4cb:	74 43 	je	67 <__Z10preprocessPKfiiiii._omp_fn.2+0x1f0>
     4cd:	c5 fb 11 4d b8 	vmovsd	%xmm1, -72(%rbp)
     4d2:	83 f9 02 	cmpl	$2, %ecx
     4d5:	74 39 	je	57 <__Z10preprocessPKfiiiii._omp_fn.2+0x1f0>
     4d7:	c5 fb 11 4d c0 	vmovsd	%xmm1, -64(%rbp)
     4dc:	83 f9 03 	cmpl	$3, %ecx
     4df:	74 2f 	je	47 <__Z10preprocessPKfiiiii._omp_fn.2+0x1f0>
     4e1:	c5 fb 11 4d c8 	vmovsd	%xmm1, -56(%rbp)
     4e6:	83 f9 04 	cmpl	$4, %ecx
     4e9:	74 25 	je	37 <__Z10preprocessPKfiiiii._omp_fn.2+0x1f0>
     4eb:	c5 fb 11 4d d0 	vmovsd	%xmm1, -48(%rbp)
     4f0:	83 f9 05 	cmpl	$5, %ecx
     4f3:	74 1b 	je	27 <__Z10preprocessPKfiiiii._omp_fn.2+0x1f0>
     4f5:	ba 05 00 00 00 	movl	$5, %edx
     4fa:	4c 8d 4d b0 	leaq	-80(%rbp), %r9
     4fe:	c4 c1 7b 11 0c d1 	vmovsd	%xmm1, (%r9,%rdx,8)
     504:	48 ff c2 	incq	%rdx
     507:	39 d1 	cmpl	%edx, %ecx
     509:	7f f3 	jg	-13 <__Z10preprocessPKfiiiii._omp_fn.2+0x1de>
     50b:	0f 1f 44 00 00 	nopl	(%rax,%rax)
     510:	c5 fd 28 45 b0 	vmovapd	-80(%rbp), %ymm0
; data[j*na + na-1] -= avg_v;
     515:	c4 81 7d 28 74 3e e0 	vmovapd	-32(%r14,%r15), %ymm6
     51c:	c5 cd 5c c0 	vsubpd	%ymm0, %ymm6, %ymm0
     520:	c4 81 7d 29 44 3e e0 	vmovapd	%ymm0, -32(%r14,%r15)
; sum4 = double4_0;
     527:	85 c0 	testl	%eax, %eax
; for (int i = 0; i < na; i++) {
     529:	0f 8e 21 01 00 00 	jle	289 <__Z10preprocessPKfiiiii._omp_fn.2+0x330>
     52f:	4c 89 f2 	movq	%r14, %rdx
     532:	c5 f9 57 c0 	vxorpd	%xmm0, %xmm0, %xmm0
     536:	66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
; double4_t e_v = data[j*na+i];
     540:	c5 fd 28 0a 	vmovapd	(%rdx), %ymm1
; sum4 += e_v * e_v;
     544:	48 83 c2 20 	addq	$32, %rdx
     548:	c4 e2 f5 b8 c1 	vfmadd231pd	%ymm1, %ymm1, %ymm0
; for (int i = 0; i < na; i++) {
     54d:	48 39 d3 	cmpq	%rdx, %rbx
     550:	75 ee 	jne	-18 <__Z10preprocessPKfiiiii._omp_fn.2+0x220>
; sum = hsum(sum4);
     552:	c5 fb 58 eb 	vaddsd	%xmm3, %xmm0, %xmm5
; for (int i = 0; i < 4; i++) sum += sum_v[i];
     556:	c5 f9 15 c8 	vunpckhpd	%xmm0, %xmm0, %xmm1
     55a:	c4 e3 7d 19 c0 01 	vextractf128	$1, %ymm0, %xmm0
     560:	c5 f3 58 cd 	vaddsd	%xmm5, %xmm1, %xmm1
     564:	c5 fb 58 c9 	vaddsd	%xmm1, %xmm0, %xmm1
     568:	c5 f9 15 c0 	vunpckhpd	%xmm0, %xmm0, %xmm0
     56c:	c5 fb 58 c1 	vaddsd	%xmm1, %xmm0, %xmm0
; return sum;
     570:	c5 f9 2e d8 	vucomisd	%xmm0, %xmm3
; sum = sqrt(sum);
     574:	c5 f3 51 c8 	vsqrtsd	%xmm0, %xmm1, %xmm1
     578:	0f 87 14 01 00 00 	ja	276 <__Z10preprocessPKfiiiii._omp_fn.2+0x372>
; sum4 = double4_0;
     57e:	c5 fd 29 55 90 	vmovapd	%ymm2, -112(%rbp)
; for (int k = 0; k < nb; k++) sum4[k] = sum;
     583:	45 85 ed 	testl	%r13d, %r13d
     586:	7e 52 	jle	82 <__Z10preprocessPKfiiiii._omp_fn.2+0x2ba>
     588:	c5 fb 11 4d 90 	vmovsd	%xmm1, -112(%rbp)
     58d:	41 83 fd 01 	cmpl	$1, %r13d
     591:	74 47 	je	71 <__Z10preprocessPKfiiiii._omp_fn.2+0x2ba>
     593:	c5 fb 11 4d 98 	vmovsd	%xmm1, -104(%rbp)
     598:	41 83 fd 02 	cmpl	$2, %r13d
     59c:	74 38 	je	56 <__Z10preprocessPKfiiiii._omp_fn.2+0x2b6>
     59e:	c5 fb 11 4d a0 	vmovsd	%xmm1, -96(%rbp)
     5a3:	41 83 fd 03 	cmpl	$3, %r13d
     5a7:	74 2d 	je	45 <__Z10preprocessPKfiiiii._omp_fn.2+0x2b6>
     5a9:	c5 fb 11 4d a8 	vmovsd	%xmm1, -88(%rbp)
     5ae:	41 83 fd 04 	cmpl	$4, %r13d
     5b2:	74 22 	je	34 <__Z10preprocessPKfiiiii._omp_fn.2+0x2b6>
     5b4:	c5 fb 11 4d b0 	vmovsd	%xmm1, -80(%rbp)
     5b9:	41 83 fd 05 	cmpl	$5, %r13d
     5bd:	74 17 	je	23 <__Z10preprocessPKfiiiii._omp_fn.2+0x2b6>
     5bf:	ba 05 00 00 00 	movl	$5, %edx
     5c4:	4c 8d 4d 90 	leaq	-112(%rbp), %r9
     5c8:	c4 c1 7b 11 0c d1 	vmovsd	%xmm1, (%r9,%rdx,8)
     5ce:	48 ff c2 	incq	%rdx
     5d1:	41 39 d5 	cmpl	%edx, %r13d
     5d4:	7f f2 	jg	-14 <__Z10preprocessPKfiiiii._omp_fn.2+0x2a8>
; for (int i = 0; i < na; i++) {
     5d6:	85 c0 	testl	%eax, %eax
     5d8:	7e 2c 	jle	44 <__Z10preprocessPKfiiiii._omp_fn.2+0x2e6>
; data[j*na+i] /= sum4;
     5da:	c5 fd 28 4d 90 	vmovapd	-112(%rbp), %ymm1
     5df:	4c 89 f2 	movq	%r14, %rdx
     5e2:	66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
     5ec:	0f 1f 40 00 	nopl	(%rax)
     5f0:	c5 fd 28 32 	vmovapd	(%rdx), %ymm6
     5f4:	48 83 c2 20 	addq	$32, %rdx
     5f8:	c5 cd 5e c1 	vdivpd	%ymm1, %ymm6, %ymm0
     5fc:	c5 fd 29 42 e0 	vmovapd	%ymm0, -32(%rdx)
; for (int i = 0; i < na; i++) {
     601:	48 39 d3 	cmpq	%rdx, %rbx
     604:	75 ea 	jne	-22 <__Z10preprocessPKfiiiii._omp_fn.2+0x2d0>
     606:	ff c6 	incl	%esi
     608:	4d 01 fe 	addq	%r15, %r14
     60b:	4c 01 fb 	addq	%r15, %rbx
     60e:	4d 01 fc 	addq	%r15, %r12
     611:	41 39 f0 	cmpl	%esi, %r8d
     614:	0f 85 d6 fd ff ff 	jne	-554 <__Z10preprocessPKfiiiii._omp_fn.2+0xd0>
     61a:	c5 f8 77 	vzeroupper
; #pragma omp parallel for
     61d:	48 83 ec 80 	subq	$-128, %rsp
     621:	5b 	popq	%rbx
     622:	41 5a 	popq	%r10
     624:	41 5c 	popq	%r12
     626:	41 5d 	popq	%r13
     628:	41 5e 	popq	%r14
     62a:	41 5f 	popq	%r15
     62c:	5d 	popq	%rbp
     62d:	49 8d 62 f8 	leaq	-8(%r10), %rsp
     631:	c3 	retq
     632:	66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
     63c:	0f 1f 40 00 	nopl	(%rax)
; for (int k = 0; k < lim; k++) avg_v[k] = avg;
     640:	c5 f9 57 c0 	vxorpd	%xmm0, %xmm0, %xmm0
     644:	e9 cc fe ff ff 	jmp	-308 <__Z10preprocessPKfiiiii._omp_fn.2+0x1f5>
     649:	0f 1f 80 00 00 00 00 	nopl	(%rax)
; sum4 = double4_0;
     650:	c5 fd 29 55 90 	vmovapd	%ymm2, -112(%rbp)
; for (int k = 0; k < nb; k++) sum4[k] = sum;
     655:	45 85 ed 	testl	%r13d, %r13d
     658:	7e ac 	jle	-84 <__Z10preprocessPKfiiiii._omp_fn.2+0x2e6>
     65a:	48 c7 45 90 00 00 00 00 	movq	$0, -112(%rbp)
     662:	41 83 fd 01 	cmpl	$1, %r13d
     666:	74 9e 	je	-98 <__Z10preprocessPKfiiiii._omp_fn.2+0x2e6>
; sum = sqrt(sum);
     668:	c5 f1 57 c9 	vxorpd	%xmm1, %xmm1, %xmm1
     66c:	e9 22 ff ff ff 	jmp	-222 <__Z10preprocessPKfiiiii._omp_fn.2+0x273>
     671:	66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
     67b:	0f 1f 44 00 00 	nopl	(%rax,%rax)
; for (int i = 0; i < na; i++) {
     680:	c5 f9 57 c0 	vxorpd	%xmm0, %xmm0, %xmm0
     684:	e9 a2 fd ff ff 	jmp	-606 <__Z10preprocessPKfiiiii._omp_fn.2+0x10b>
     689:	ff c0 	incl	%eax
; #pragma omp parallel for
     68b:	31 d2 	xorl	%edx, %edx
     68d:	e9 cf fc ff ff 	jmp	-817 <__Z10preprocessPKfiiiii._omp_fn.2+0x41>
     692:	c5 fb 11 a5 68 ff ff ff 	vmovsd	%xmm4, -152(%rbp)
     69a:	89 bd 74 ff ff ff 	movl	%edi, -140(%rbp)
     6a0:	c5 fb 11 8d 78 ff ff ff 	vmovsd	%xmm1, -136(%rbp)
     6a8:	89 4d 80 	movl	%ecx, -128(%rbp)
     6ab:	44 89 45 84 	movl	%r8d, -124(%rbp)
     6af:	89 45 88 	movl	%eax, -120(%rbp)
     6b2:	89 75 8c 	movl	%esi, -116(%rbp)
; sum = sqrt(sum);
     6b5:	c5 f8 77 	vzeroupper
     6b8:	e8 00 00 00 00 	callq	0 <__Z10preprocessPKfiiiii._omp_fn.2+0x39d>
     6bd:	8b 75 8c 	movl	-116(%rbp), %esi
     6c0:	8b 45 88 	movl	-120(%rbp), %eax
     6c3:	44 8b 45 84 	movl	-124(%rbp), %r8d
     6c7:	8b 4d 80 	movl	-128(%rbp), %ecx
     6ca:	c5 fb 10 8d 78 ff ff ff 	vmovsd	-136(%rbp), %xmm1
     6d2:	8b bd 74 ff ff ff 	movl	-140(%rbp), %edi
     6d8:	c5 fb 10 a5 68 ff ff ff 	vmovsd	-152(%rbp), %xmm4
     6e0:	c5 e9 57 d2 	vxorpd	%xmm2, %xmm2, %xmm2
     6e4:	c5 e1 57 db 	vxorpd	%xmm3, %xmm3, %xmm3
     6e8:	e9 91 fe ff ff 	jmp	-367 <__Z10preprocessPKfiiiii._omp_fn.2+0x25e>
     6ed:	0f 1f 00 	nopl	(%rax)

__Z9correlateiiPKfPf._omp_fn.3:
; #pragma omp parallel for schedule(dynamic,1)
     6f0:	55 	pushq	%rbp
     6f1:	b9 01 00 00 00 	movl	$1, %ecx
     6f6:	ba 01 00 00 00 	movl	$1, %edx
     6fb:	48 89 e5 	movq	%rsp, %rbp
     6fe:	41 57 	pushq	%r15
     700:	41 56 	pushq	%r14
     702:	41 55 	pushq	%r13
     704:	41 54 	pushq	%r12
     706:	53 	pushq	%rbx
     707:	48 83 e4 e0 	andq	$-32, %rsp
     70b:	48 81 ec c0 00 00 00 	subq	$192, %rsp
     712:	48 8b 47 08 	movq	8(%rdi), %rax
     716:	44 8b 7f 18 	movl	24(%rdi), %r15d
     71a:	44 8b 77 14 	movl	20(%rdi), %r14d
     71e:	48 89 44 24 60 	movq	%rax, 96(%rsp)
     723:	48 63 77 1c 	movslq	28(%rdi), %rsi
     727:	48 8b 07 	movq	(%rdi), %rax
     72a:	8b 5f 10 	movl	16(%rdi), %ebx
     72d:	4c 8d 8c 24 b8 00 00 00 	leaq	184(%rsp), %r9
     735:	4c 8d 84 24 b0 00 00 00 	leaq	176(%rsp), %r8
     73d:	31 ff 	xorl	%edi, %edi
     73f:	44 89 7c 24 2c 	movl	%r15d, 44(%rsp)
     744:	44 89 74 24 78 	movl	%r14d, 120(%rsp)
     749:	48 89 44 24 70 	movq	%rax, 112(%rsp)
     74e:	4c 89 4c 24 08 	movq	%r9, 8(%rsp)
     753:	4c 89 44 24 10 	movq	%r8, 16(%rsp)
     758:	e8 00 00 00 00 	callq	0 <__Z9correlateiiPKfPf._omp_fn.3+0x6d>
     75d:	84 c0 	testb	%al, %al
     75f:	0f 84 6e 04 00 00 	je	1134 <__Z9correlateiiPKfPf._omp_fn.3+0x4e3>
     765:	8d 04 9d 00 00 00 00 	leal	(,%rbx,4), %eax
     76c:	89 44 24 20 	movl	%eax, 32(%rsp)
     770:	42 8d 04 b5 00 00 00 00 	leal	(,%r14,4), %eax
     778:	89 44 24 24 	movl	%eax, 36(%rsp)
     77c:	89 d8 	movl	%ebx, %eax
     77e:	f7 d8 	negl	%eax
     780:	01 c0 	addl	%eax, %eax
     782:	89 44 24 1c 	movl	%eax, 28(%rsp)
     786:	43 8d 04 76 	leal	(%r14,%r14,2), %eax
     78a:	89 44 24 6c 	movl	%eax, 108(%rsp)
     78e:	43 8d 04 7f 	leal	(%r15,%r15,2), %eax
     792:	89 44 24 68 	movl	%eax, 104(%rsp)
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     796:	41 89 df 	movl	%ebx, %r15d
     799:	48 8b 84 24 b0 00 00 00 	movq	176(%rsp), %rax
     7a1:	8b 9c 24 b8 00 00 00 	movl	184(%rsp), %ebx
     7a8:	44 8d 1c 85 00 00 00 00 	leal	(,%rax,4), %r11d
     7b0:	41 8d 7b 03 	leal	3(%r11), %edi
     7b4:	89 44 24 4c 	movl	%eax, 76(%rsp)
     7b8:	89 f8 	movl	%edi, %eax
     7ba:	41 0f af c7 	imull	%r15d, %eax
     7be:	89 5c 24 28 	movl	%ebx, 40(%rsp)
     7c2:	41 8d 4b 01 	leal	1(%r11), %ecx
     7c6:	89 44 24 58 	movl	%eax, 88(%rsp)
     7ca:	8b 44 24 78 	movl	120(%rsp), %eax
     7ce:	41 8d 73 02 	leal	2(%r11), %esi
     7d2:	89 c3 	movl	%eax, %ebx
     7d4:	41 0f af db 	imull	%r11d, %ebx
     7d8:	89 bc 24 a0 00 00 00 	movl	%edi, 160(%rsp)
     7df:	89 b4 24 a4 00 00 00 	movl	%esi, 164(%rsp)
     7e6:	89 5c 24 30 	movl	%ebx, 48(%rsp)
     7ea:	89 c3 	movl	%eax, %ebx
     7ec:	0f af d9 	imull	%ecx, %ebx
     7ef:	89 8c 24 a8 00 00 00 	movl	%ecx, 168(%rsp)
     7f6:	44 89 9c 24 ac 00 00 00 	movl	%r11d, 172(%rsp)
     7fe:	89 5c 24 34 	movl	%ebx, 52(%rsp)
     802:	89 c3 	movl	%eax, %ebx
     804:	0f af de 	imull	%esi, %ebx
     807:	0f af c7 	imull	%edi, %eax
     80a:	89 5c 24 38 	movl	%ebx, 56(%rsp)
     80e:	89 44 24 3c 	movl	%eax, 60(%rsp)
     812:	44 89 fb 	movl	%r15d, %ebx
     815:	42 8d 04 bd 00 00 00 00 	leal	(,%r15,4), %eax
     81d:	29 c3 	subl	%eax, %ebx
     81f:	89 5c 24 18 	movl	%ebx, 24(%rsp)
; for (int j = 0; j < ncH; j++) {
     823:	8b 84 24 ac 00 00 00 	movl	172(%rsp), %eax
; int col_v = row/V;
     82a:	ba 56 55 55 55 	movl	$1431655766, %edx
     82f:	f7 ea 	imull	%edx
     831:	8b 84 24 ac 00 00 00 	movl	172(%rsp), %eax
     838:	c1 f8 1f 	sarl	$31, %eax
     83b:	29 c2 	subl	%eax, %edx
     83d:	89 d0 	movl	%edx, %eax
; for (int i = col_v; i < ncV; i++) {
     83f:	39 54 24 2c 	cmpl	%edx, 44(%rsp)
     843:	0f 8e 22 03 00 00 	jle	802 <__Z9correlateiiPKfPf._omp_fn.3+0x47b>
; result[jj*ny+ii] = sum;
     849:	8b 5c 24 58 	movl	88(%rsp), %ebx
     84d:	8b 74 24 1c 	movl	28(%rsp), %esi
     851:	8b 7c 24 18 	movl	24(%rsp), %edi
     855:	01 de 	addl	%ebx, %esi
     857:	89 74 24 44 	movl	%esi, 68(%rsp)
     85b:	8b 74 24 78 	movl	120(%rsp), %esi
     85f:	01 df 	addl	%ebx, %edi
     861:	44 8d 04 52 	leal	(%rdx,%rdx,2), %r8d
     865:	44 29 fb 	subl	%r15d, %ebx
     868:	89 5c 24 40 	movl	%ebx, 64(%rsp)
     86c:	45 8d 48 01 	leal	1(%r8), %r9d
     870:	89 f3 	movl	%esi, %ebx
     872:	41 0f af d9 	imull	%r9d, %ebx
     876:	0f af 44 24 6c 	imull	108(%rsp), %eax
     87b:	4c 63 74 24 30 	movslq	48(%rsp), %r14
     880:	89 5c 24 7c 	movl	%ebx, 124(%rsp)
     884:	29 d8 	subl	%ebx, %eax
     886:	89 44 24 5c 	movl	%eax, 92(%rsp)
     88a:	8d 46 ff 	leal	-1(%rsi), %eax
     88d:	4c 63 6c 24 34 	movslq	52(%rsp), %r13
     892:	4c 63 64 24 38 	movslq	56(%rsp), %r12
     897:	48 63 5c 24 3c 	movslq	60(%rsp), %rbx
     89c:	89 7c 24 48 	movl	%edi, 72(%rsp)
     8a0:	48 89 44 24 50 	movq	%rax, 80(%rsp)
     8a5:	45 8d 50 02 	leal	2(%r8), %r10d
     8a9:	49 c1 e6 05 	shlq	$5, %r14
     8ad:	49 c1 e5 05 	shlq	$5, %r13
     8b1:	49 c1 e4 05 	shlq	$5, %r12
     8b5:	48 c1 e3 05 	shlq	$5, %rbx
; asm("#foo");
     8b9:	8b 4c 24 78 	movl	120(%rsp), %ecx
; for (int k = 0; k < na; k++) {
     8bd:	85 c9 	testl	%ecx, %ecx
     8bf:	0f 8e 63 06 00 00 	jle	1635 <__Z9correlateiiPKfPf._omp_fn.3+0x838>
     8c5:	48 63 74 24 7c 	movslq	124(%rsp), %rsi
     8ca:	8b 7c 24 5c 	movl	92(%rsp), %edi
     8ce:	49 89 f3 	movq	%rsi, %r11
     8d1:	01 f7 	addl	%esi, %edi
     8d3:	44 01 d9 	addl	%r11d, %ecx
     8d6:	48 63 ff 	movslq	%edi, %rdi
     8d9:	48 63 c9 	movslq	%ecx, %rcx
     8dc:	48 8b 54 24 60 	movq	96(%rsp), %rdx
     8e1:	48 8d 47 01 	leaq	1(%rdi), %rax
     8e5:	48 ff c6 	incq	%rsi
     8e8:	48 ff c1 	incq	%rcx
     8eb:	48 c1 e0 05 	shlq	$5, %rax
     8ef:	48 c1 e6 05 	shlq	$5, %rsi
     8f3:	48 c1 e1 05 	shlq	$5, %rcx
     8f7:	49 89 d3 	movq	%rdx, %r11
     8fa:	48 01 d0 	addq	%rdx, %rax
     8fd:	48 01 d6 	addq	%rdx, %rsi
     900:	48 01 d1 	addq	%rdx, %rcx
     903:	48 8b 54 24 50 	movq	80(%rsp), %rdx
; block[id][jd] = double4_0;
     908:	c5 d1 57 ed 	vxorpd	%xmm5, %xmm5, %xmm5
     90c:	48 01 fa 	addq	%rdi, %rdx
     90f:	48 c1 e2 05 	shlq	$5, %rdx
     913:	48 f7 df 	negq	%rdi
     916:	4d 8d 5c 13 40 	leaq	64(%r11,%rdx), %r11
     91b:	48 c1 e7 05 	shlq	$5, %rdi
     91f:	c5 fd 28 fd 	vmovapd	%ymm5, %ymm7
     923:	c5 7d 28 d5 	vmovapd	%ymm5, %ymm10
     927:	c5 7d 28 ed 	vmovapd	%ymm5, %ymm13
     92b:	c5 fd 28 f5 	vmovapd	%ymm5, %ymm6
     92f:	c5 7d 28 c5 	vmovapd	%ymm5, %ymm8
     933:	c5 7d 28 dd 	vmovapd	%ymm5, %ymm11
     937:	c5 7d 28 f5 	vmovapd	%ymm5, %ymm14
     93b:	c5 fd 29 ac 24 80 00 00 00 	vmovapd	%ymm5, 128(%rsp)
     944:	c5 7d 28 cd 	vmovapd	%ymm5, %ymm9
     948:	c5 7d 28 e5 	vmovapd	%ymm5, %ymm12
     94c:	c5 7d 28 fd 	vmovapd	%ymm5, %ymm15
; __builtin_prefetch(&data[na*(i * V + l) + k + 1]);
     950:	48 8d 14 07 	leaq	(%rdi,%rax), %rdx
; double4_t b8 = data[na*(i * V + l) + k];
     954:	c5 fd 28 40 e0 	vmovapd	-32(%rax), %ymm0
; double4_t a8 = data[na*(j * H + d) + k];
     959:	c4 a1 7d 28 64 32 e0 	vmovapd	-32(%rdx,%r14), %ymm4
     960:	c4 a1 7d 28 5c 2a e0 	vmovapd	-32(%rdx,%r13), %ymm3
     967:	c4 a1 7d 28 54 22 e0 	vmovapd	-32(%rdx,%r12), %ymm2
     96e:	c5 fd 28 4c 1a e0 	vmovapd	-32(%rdx,%rbx), %ymm1
; block[l][d] += a8 * b8;
     974:	c4 62 fd b8 fc 	vfmadd231pd	%ymm4, %ymm0, %ymm15
     979:	c4 62 fd b8 e3 	vfmadd231pd	%ymm3, %ymm0, %ymm12
     97e:	c4 62 fd b8 ca 	vfmadd231pd	%ymm2, %ymm0, %ymm9
     983:	c4 e2 f5 a8 84 24 80 00 00 00 	vfmadd213pd	128(%rsp), %ymm1, %ymm0
; __builtin_prefetch(&data[na*(i * V + l) + k + 1]);
     98d:	0f 18 08 	prefetcht0	(%rax)
; double4_t b8 = data[na*(i * V + l) + k];
     990:	48 83 c0 20 	addq	$32, %rax
; __builtin_prefetch(&data[na*(i * V + l) + k + 1]);
     994:	0f 18 0e 	prefetcht0	(%rsi)
     997:	0f 18 09 	prefetcht0	(%rcx)
; block[l][d] += a8 * b8;
     99a:	c5 fd 29 84 24 80 00 00 00 	vmovapd	%ymm0, 128(%rsp)
; __builtin_prefetch(&data[na*(i * V + l) + k + 1]);
     9a3:	c5 fd 28 46 e0 	vmovapd	-32(%rsi), %ymm0
; for (int d = 0; d < H; d++) {
     9a8:	48 83 c1 20 	addq	$32, %rcx
; block[l][d] += a8 * b8;
     9ac:	c4 62 dd b8 f0 	vfmadd231pd	%ymm0, %ymm4, %ymm14
; double4_t a8 = data[na*(j * H + d) + k];
     9b1:	c4 62 e5 b8 d8 	vfmadd231pd	%ymm0, %ymm3, %ymm11
     9b6:	c4 62 ed b8 c0 	vfmadd231pd	%ymm0, %ymm2, %ymm8
     9bb:	c4 e2 f5 b8 f0 	vfmadd231pd	%ymm0, %ymm1, %ymm6
; __builtin_prefetch(&data[na*(i * V + l) + k + 1]);
     9c0:	c5 fd 28 41 c0 	vmovapd	-64(%rcx), %ymm0
; for (int d = 0; d < H; d++) {
     9c5:	48 83 c6 20 	addq	$32, %rsi
; block[l][d] += a8 * b8;
     9c9:	c4 62 dd b8 e8 	vfmadd231pd	%ymm0, %ymm4, %ymm13
; double4_t a8 = data[na*(j * H + d) + k];
     9ce:	c4 62 e5 b8 d0 	vfmadd231pd	%ymm0, %ymm3, %ymm10
     9d3:	c4 e2 ed b8 f8 	vfmadd231pd	%ymm0, %ymm2, %ymm7
     9d8:	c4 e2 f5 b8 e8 	vfmadd231pd	%ymm0, %ymm1, %ymm5
; for (int k = 0; k < na; k++) {
     9dd:	49 39 c3 	cmpq	%rax, %r11
     9e0:	0f 85 6a ff ff ff 	jne	-150 <__Z9correlateiiPKfPf._omp_fn.3+0x260>
; int jj = j * H + jd;
     9e6:	8b bc 24 ac 00 00 00 	movl	172(%rsp), %edi
; if (ii < ny && jj < ny && ii >= jj) {
     9ed:	44 39 c7 	cmpl	%r8d, %edi
     9f0:	41 0f 4c f8 	cmovll	%r8d, %edi
     9f4:	0f 9e c0 	setle	%al
     9f7:	41 39 ff 	cmpl	%edi, %r15d
     9fa:	7e 08 	jle	8 <__Z9correlateiiPKfPf._omp_fn.3+0x314>
     9fc:	84 c0 	testb	%al, %al
     9fe:	0f 85 e3 01 00 00 	jne	483 <__Z9correlateiiPKfPf._omp_fn.3+0x4f7>
; int jj = j * H + jd;
     a04:	8b bc 24 ac 00 00 00 	movl	172(%rsp), %edi
; if (ii < ny && jj < ny && ii >= jj) {
     a0b:	44 39 cf 	cmpl	%r9d, %edi
     a0e:	89 fa 	movl	%edi, %edx
     a10:	41 0f 4c d1 	cmovll	%r9d, %edx
     a14:	41 39 d7 	cmpl	%edx, %r15d
     a17:	7e 09 	jle	9 <__Z9correlateiiPKfPf._omp_fn.3+0x332>
     a19:	44 39 cf 	cmpl	%r9d, %edi
     a1c:	0f 8e 0b 02 00 00 	jle	523 <__Z9correlateiiPKfPf._omp_fn.3+0x53d>
; int jj = j * H + jd;
     a22:	8b b4 24 ac 00 00 00 	movl	172(%rsp), %esi
; if (ii < ny && jj < ny && ii >= jj) {
     a29:	44 39 d6 	cmpl	%r10d, %esi
     a2c:	89 f2 	movl	%esi, %edx
     a2e:	41 0f 4c d2 	cmovll	%r10d, %edx
     a32:	41 39 d7 	cmpl	%edx, %r15d
     a35:	7e 09 	jle	9 <__Z9correlateiiPKfPf._omp_fn.3+0x350>
     a37:	44 39 d6 	cmpl	%r10d, %esi
     a3a:	0f 8e 33 02 00 00 	jle	563 <__Z9correlateiiPKfPf._omp_fn.3+0x583>
; int jj = j * H + jd;
     a40:	8b 8c 24 a8 00 00 00 	movl	168(%rsp), %ecx
; if (ii < ny && jj < ny && ii >= jj) {
     a47:	41 39 c8 	cmpl	%ecx, %r8d
     a4a:	89 ca 	movl	%ecx, %edx
     a4c:	41 0f 4d d0 	cmovgel	%r8d, %edx
     a50:	41 39 d7 	cmpl	%edx, %r15d
     a53:	7e 09 	jle	9 <__Z9correlateiiPKfPf._omp_fn.3+0x36e>
     a55:	41 39 c8 	cmpl	%ecx, %r8d
     a58:	0f 8d 5b 02 00 00 	jge	603 <__Z9correlateiiPKfPf._omp_fn.3+0x5c9>
; int jj = j * H + jd;
     a5e:	8b bc 24 a8 00 00 00 	movl	168(%rsp), %edi
; if (ii < ny && jj < ny && ii >= jj) {
     a65:	41 39 f9 	cmpl	%edi, %r9d
     a68:	89 fa 	movl	%edi, %edx
     a6a:	41 0f 4d d1 	cmovgel	%r9d, %edx
     a6e:	41 39 d7 	cmpl	%edx, %r15d
     a71:	7e 08 	jle	8 <__Z9correlateiiPKfPf._omp_fn.3+0x38b>
     a73:	84 c0 	testb	%al, %al
     a75:	0f 85 84 02 00 00 	jne	644 <__Z9correlateiiPKfPf._omp_fn.3+0x60f>
; int jj = j * H + jd;
     a7b:	8b bc 24 a8 00 00 00 	movl	168(%rsp), %edi
; if (ii < ny && jj < ny && ii >= jj) {
     a82:	41 39 fa 	cmpl	%edi, %r10d
     a85:	89 fa 	movl	%edi, %edx
     a87:	41 0f 4d d2 	cmovgel	%r10d, %edx
     a8b:	41 39 d7 	cmpl	%edx, %r15d
     a8e:	7e 09 	jle	9 <__Z9correlateiiPKfPf._omp_fn.3+0x3a9>
     a90:	41 39 fa 	cmpl	%edi, %r10d
     a93:	0f 8d ac 02 00 00 	jge	684 <__Z9correlateiiPKfPf._omp_fn.3+0x655>
; int jj = j * H + jd;
     a99:	8b b4 24 a4 00 00 00 	movl	164(%rsp), %esi
; if (ii < ny && jj < ny && ii >= jj) {
     aa0:	41 39 f0 	cmpl	%esi, %r8d
     aa3:	89 f2 	movl	%esi, %edx
     aa5:	41 0f 4d d0 	cmovgel	%r8d, %edx
     aa9:	41 39 d7 	cmpl	%edx, %r15d
     aac:	7e 09 	jle	9 <__Z9correlateiiPKfPf._omp_fn.3+0x3c7>
     aae:	41 39 f0 	cmpl	%esi, %r8d
     ab1:	0f 8d d4 02 00 00 	jge	724 <__Z9correlateiiPKfPf._omp_fn.3+0x69b>
; int jj = j * H + jd;
     ab7:	8b 8c 24 a4 00 00 00 	movl	164(%rsp), %ecx
; if (ii < ny && jj < ny && ii >= jj) {
     abe:	41 39 c9 	cmpl	%ecx, %r9d
     ac1:	89 ca 	movl	%ecx, %edx
     ac3:	41 0f 4d d1 	cmovgel	%r9d, %edx
     ac7:	41 39 d7 	cmpl	%edx, %r15d
     aca:	7e 09 	jle	9 <__Z9correlateiiPKfPf._omp_fn.3+0x3e5>
     acc:	41 39 c9 	cmpl	%ecx, %r9d
     acf:	0f 8d fc 02 00 00 	jge	764 <__Z9correlateiiPKfPf._omp_fn.3+0x6e1>
; int jj = j * H + jd;
     ad5:	8b b4 24 a4 00 00 00 	movl	164(%rsp), %esi
; if (ii < ny && jj < ny && ii >= jj) {
     adc:	41 39 f2 	cmpl	%esi, %r10d
     adf:	89 f2 	movl	%esi, %edx
     ae1:	41 0f 4d d2 	cmovgel	%r10d, %edx
     ae5:	41 39 d7 	cmpl	%edx, %r15d
     ae8:	7e 08 	jle	8 <__Z9correlateiiPKfPf._omp_fn.3+0x402>
     aea:	84 c0 	testb	%al, %al
     aec:	0f 85 25 03 00 00 	jne	805 <__Z9correlateiiPKfPf._omp_fn.3+0x727>
; int jj = j * H + jd;
     af2:	8b bc 24 a0 00 00 00 	movl	160(%rsp), %edi
; if (ii < ny && jj < ny && ii >= jj) {
     af9:	41 39 f8 	cmpl	%edi, %r8d
     afc:	89 f8 	movl	%edi, %eax
     afe:	41 0f 4d c0 	cmovgel	%r8d, %eax
     b02:	41 39 c7 	cmpl	%eax, %r15d
     b05:	7e 09 	jle	9 <__Z9correlateiiPKfPf._omp_fn.3+0x420>
     b07:	41 39 f8 	cmpl	%edi, %r8d
     b0a:	0f 8d 49 03 00 00 	jge	841 <__Z9correlateiiPKfPf._omp_fn.3+0x769>
; int jj = j * H + jd;
     b10:	8b b4 24 a0 00 00 00 	movl	160(%rsp), %esi
; if (ii < ny && jj < ny && ii >= jj) {
     b17:	41 39 f1 	cmpl	%esi, %r9d
     b1a:	89 f0 	movl	%esi, %eax
     b1c:	41 0f 4d c1 	cmovgel	%r9d, %eax
     b20:	41 39 c7 	cmpl	%eax, %r15d
     b23:	7e 09 	jle	9 <__Z9correlateiiPKfPf._omp_fn.3+0x43e>
     b25:	41 39 f1 	cmpl	%esi, %r9d
     b28:	0f 8d 76 03 00 00 	jge	886 <__Z9correlateiiPKfPf._omp_fn.3+0x7b4>
; int jj = j * H + jd;
     b2e:	8b 8c 24 a0 00 00 00 	movl	160(%rsp), %ecx
; if (ii < ny && jj < ny && ii >= jj) {
     b35:	41 39 ca 	cmpl	%ecx, %r10d
     b38:	89 c8 	movl	%ecx, %eax
     b3a:	41 0f 4d c2 	cmovgel	%r10d, %eax
     b3e:	41 39 c7 	cmpl	%eax, %r15d
     b41:	7e 09 	jle	9 <__Z9correlateiiPKfPf._omp_fn.3+0x45c>
     b43:	41 39 ca 	cmpl	%ecx, %r10d
     b46:	0f 8d 9a 03 00 00 	jge	922 <__Z9correlateiiPKfPf._omp_fn.3+0x7f6>
; asm("#bar");
     b4c:	8b 74 24 6c 	movl	108(%rsp), %esi
     b50:	41 83 c0 03 	addl	$3, %r8d
     b54:	41 83 c2 03 	addl	$3, %r10d
     b58:	41 83 c1 03 	addl	$3, %r9d
     b5c:	01 74 24 7c 	addl	%esi, 124(%rsp)
; for (int i = col_v; i < ncV; i++) {
     b60:	44 39 44 24 68 	cmpl	%r8d, 104(%rsp)
     b65:	0f 85 4e fd ff ff 	jne	-690 <__Z9correlateiiPKfPf._omp_fn.3+0x1c9>
     b6b:	ff 44 24 4c 	incl	76(%rsp)
     b6f:	8b 44 24 24 	movl	36(%rsp), %eax
     b73:	8b 7c 24 20 	movl	32(%rsp), %edi
     b77:	83 84 24 ac 00 00 00 04 	addl	$4, 172(%rsp)
     b7f:	8b 5c 24 4c 	movl	76(%rsp), %ebx
     b83:	01 7c 24 58 	addl	%edi, 88(%rsp)
     b87:	83 84 24 a0 00 00 00 04 	addl	$4, 160(%rsp)
     b8f:	83 84 24 a4 00 00 00 04 	addl	$4, 164(%rsp)
     b97:	83 84 24 a8 00 00 00 04 	addl	$4, 168(%rsp)
     b9f:	01 44 24 30 	addl	%eax, 48(%rsp)
     ba3:	01 44 24 34 	addl	%eax, 52(%rsp)
     ba7:	01 44 24 38 	addl	%eax, 56(%rsp)
     bab:	01 44 24 3c 	addl	%eax, 60(%rsp)
     baf:	39 5c 24 28 	cmpl	%ebx, 40(%rsp)
     bb3:	0f 8f 6a fc ff ff 	jg	-918 <__Z9correlateiiPKfPf._omp_fn.3+0x133>
     bb9:	48 8b 74 24 08 	movq	8(%rsp), %rsi
     bbe:	48 8b 7c 24 10 	movq	16(%rsp), %rdi
     bc3:	c5 f8 77 	vzeroupper
     bc6:	e8 00 00 00 00 	callq	0 <__Z9correlateiiPKfPf._omp_fn.3+0x4db>
     bcb:	84 c0 	testb	%al, %al
     bcd:	0f 85 c6 fb ff ff 	jne	-1082 <__Z9correlateiiPKfPf._omp_fn.3+0xa9>
     bd3:	e8 00 00 00 00 	callq	0 <__Z9correlateiiPKfPf._omp_fn.3+0x4e8>
; #pragma omp parallel for schedule(dynamic,1)
     bd8:	48 8d 65 d8 	leaq	-40(%rbp), %rsp
     bdc:	5b 	popq	%rbx
     bdd:	41 5c 	popq	%r12
     bdf:	41 5d 	popq	%r13
     be1:	41 5e 	popq	%r14
     be3:	41 5f 	popq	%r15
     be5:	5d 	popq	%rbp
     be6:	c3 	retq
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     be7:	c5 e9 57 d2 	vxorpd	%xmm2, %xmm2, %xmm2
     beb:	c5 83 58 ca 	vaddsd	%xmm2, %xmm15, %xmm1
     bef:	c4 c1 01 15 c7 	vunpckhpd	%xmm15, %xmm15, %xmm0
     bf4:	c4 43 7d 19 ff 01 	vextractf128	$1, %ymm15, %xmm15
     bfa:	c5 fb 58 c1 	vaddsd	%xmm1, %xmm0, %xmm0
     bfe:	8b 74 24 48 	movl	72(%rsp), %esi
; result[jj*ny+ii] = sum;
     c02:	48 8b 7c 24 70 	movq	112(%rsp), %rdi
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     c07:	c5 83 58 c0 	vaddsd	%xmm0, %xmm15, %xmm0
     c0b:	c4 41 01 15 ff 	vunpckhpd	%xmm15, %xmm15, %xmm15
; result[jj*ny+ii] = sum;
     c10:	41 8d 14 30 	leal	(%r8,%rsi), %edx
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     c14:	c5 83 58 c0 	vaddsd	%xmm0, %xmm15, %xmm0
; result[jj*ny+ii] = sum;
     c18:	48 63 d2 	movslq	%edx, %rdx
     c1b:	c5 d8 57 e4 	vxorps	%xmm4, %xmm4, %xmm4
     c1f:	c5 db 5a e0 	vcvtsd2ss	%xmm0, %xmm4, %xmm4
     c23:	c5 fa 11 24 97 	vmovss	%xmm4, (%rdi,%rdx,4)
     c28:	e9 d7 fd ff ff 	jmp	-553 <__Z9correlateiiPKfPf._omp_fn.3+0x314>
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     c2d:	c5 e9 57 d2 	vxorpd	%xmm2, %xmm2, %xmm2
     c31:	c5 8b 58 ca 	vaddsd	%xmm2, %xmm14, %xmm1
     c35:	c4 c1 09 15 c6 	vunpckhpd	%xmm14, %xmm14, %xmm0
     c3a:	c4 43 7d 19 f6 01 	vextractf128	$1, %ymm14, %xmm14
     c40:	c5 fb 58 c1 	vaddsd	%xmm1, %xmm0, %xmm0
     c44:	8b 74 24 48 	movl	72(%rsp), %esi
; result[jj*ny+ii] = sum;
     c48:	48 8b 4c 24 70 	movq	112(%rsp), %rcx
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     c4d:	c5 8b 58 c0 	vaddsd	%xmm0, %xmm14, %xmm0
     c51:	c4 41 09 15 f6 	vunpckhpd	%xmm14, %xmm14, %xmm14
; result[jj*ny+ii] = sum;
     c56:	41 8d 14 31 	leal	(%r9,%rsi), %edx
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     c5a:	c5 8b 58 c0 	vaddsd	%xmm0, %xmm14, %xmm0
; result[jj*ny+ii] = sum;
     c5e:	48 63 d2 	movslq	%edx, %rdx
     c61:	c5 d8 57 e4 	vxorps	%xmm4, %xmm4, %xmm4
     c65:	c5 db 5a e0 	vcvtsd2ss	%xmm0, %xmm4, %xmm4
     c69:	c5 fa 11 24 91 	vmovss	%xmm4, (%rcx,%rdx,4)
     c6e:	e9 af fd ff ff 	jmp	-593 <__Z9correlateiiPKfPf._omp_fn.3+0x332>
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     c73:	c5 e9 57 d2 	vxorpd	%xmm2, %xmm2, %xmm2
     c77:	c5 93 58 ca 	vaddsd	%xmm2, %xmm13, %xmm1
     c7b:	c4 c1 11 15 c5 	vunpckhpd	%xmm13, %xmm13, %xmm0
     c80:	c4 43 7d 19 ed 01 	vextractf128	$1, %ymm13, %xmm13
     c86:	c5 fb 58 c1 	vaddsd	%xmm1, %xmm0, %xmm0
     c8a:	8b 7c 24 48 	movl	72(%rsp), %edi
; result[jj*ny+ii] = sum;
     c8e:	48 8b 74 24 70 	movq	112(%rsp), %rsi
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     c93:	c5 93 58 c0 	vaddsd	%xmm0, %xmm13, %xmm0
     c97:	c4 41 11 15 ed 	vunpckhpd	%xmm13, %xmm13, %xmm13
; result[jj*ny+ii] = sum;
     c9c:	41 8d 14 3a 	leal	(%r10,%rdi), %edx
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     ca0:	c5 93 58 c0 	vaddsd	%xmm0, %xmm13, %xmm0
; result[jj*ny+ii] = sum;
     ca4:	48 63 d2 	movslq	%edx, %rdx
     ca7:	c5 d8 57 e4 	vxorps	%xmm4, %xmm4, %xmm4
     cab:	c5 db 5a e0 	vcvtsd2ss	%xmm0, %xmm4, %xmm4
     caf:	c5 fa 11 24 96 	vmovss	%xmm4, (%rsi,%rdx,4)
     cb4:	e9 87 fd ff ff 	jmp	-633 <__Z9correlateiiPKfPf._omp_fn.3+0x350>
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     cb9:	c5 e9 57 d2 	vxorpd	%xmm2, %xmm2, %xmm2
     cbd:	c5 9b 58 ca 	vaddsd	%xmm2, %xmm12, %xmm1
     cc1:	c4 c1 19 15 c4 	vunpckhpd	%xmm12, %xmm12, %xmm0
     cc6:	c4 43 7d 19 e4 01 	vextractf128	$1, %ymm12, %xmm12
     ccc:	c5 fb 58 c1 	vaddsd	%xmm1, %xmm0, %xmm0
     cd0:	8b 4c 24 44 	movl	68(%rsp), %ecx
; result[jj*ny+ii] = sum;
     cd4:	48 8b 7c 24 70 	movq	112(%rsp), %rdi
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     cd9:	c5 9b 58 c0 	vaddsd	%xmm0, %xmm12, %xmm0
     cdd:	c4 41 19 15 e4 	vunpckhpd	%xmm12, %xmm12, %xmm12
; result[jj*ny+ii] = sum;
     ce2:	41 8d 14 08 	leal	(%r8,%rcx), %edx
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     ce6:	c5 9b 58 c0 	vaddsd	%xmm0, %xmm12, %xmm0
; result[jj*ny+ii] = sum;
     cea:	48 63 d2 	movslq	%edx, %rdx
     ced:	c5 d8 57 e4 	vxorps	%xmm4, %xmm4, %xmm4
     cf1:	c5 db 5a e0 	vcvtsd2ss	%xmm0, %xmm4, %xmm4
     cf5:	c5 fa 11 24 97 	vmovss	%xmm4, (%rdi,%rdx,4)
     cfa:	e9 5f fd ff ff 	jmp	-673 <__Z9correlateiiPKfPf._omp_fn.3+0x36e>
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     cff:	c5 e9 57 d2 	vxorpd	%xmm2, %xmm2, %xmm2
     d03:	c5 a3 58 ca 	vaddsd	%xmm2, %xmm11, %xmm1
     d07:	c4 c1 21 15 c3 	vunpckhpd	%xmm11, %xmm11, %xmm0
     d0c:	c4 43 7d 19 db 01 	vextractf128	$1, %ymm11, %xmm11
     d12:	c5 fb 58 c1 	vaddsd	%xmm1, %xmm0, %xmm0
     d16:	8b 74 24 44 	movl	68(%rsp), %esi
; result[jj*ny+ii] = sum;
     d1a:	48 8b 4c 24 70 	movq	112(%rsp), %rcx
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     d1f:	c5 a3 58 c0 	vaddsd	%xmm0, %xmm11, %xmm0
     d23:	c4 41 21 15 db 	vunpckhpd	%xmm11, %xmm11, %xmm11
; result[jj*ny+ii] = sum;
     d28:	41 8d 14 31 	leal	(%r9,%rsi), %edx
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     d2c:	c5 a3 58 c0 	vaddsd	%xmm0, %xmm11, %xmm0
; result[jj*ny+ii] = sum;
     d30:	48 63 d2 	movslq	%edx, %rdx
     d33:	c5 d8 57 e4 	vxorps	%xmm4, %xmm4, %xmm4
     d37:	c5 db 5a e0 	vcvtsd2ss	%xmm0, %xmm4, %xmm4
     d3b:	c5 fa 11 24 91 	vmovss	%xmm4, (%rcx,%rdx,4)
     d40:	e9 36 fd ff ff 	jmp	-714 <__Z9correlateiiPKfPf._omp_fn.3+0x38b>
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     d45:	c5 e9 57 d2 	vxorpd	%xmm2, %xmm2, %xmm2
     d49:	c5 ab 58 ca 	vaddsd	%xmm2, %xmm10, %xmm1
     d4d:	c4 c1 29 15 c2 	vunpckhpd	%xmm10, %xmm10, %xmm0
     d52:	c4 43 7d 19 d2 01 	vextractf128	$1, %ymm10, %xmm10
     d58:	c5 fb 58 c1 	vaddsd	%xmm1, %xmm0, %xmm0
     d5c:	8b 7c 24 44 	movl	68(%rsp), %edi
; result[jj*ny+ii] = sum;
     d60:	48 8b 74 24 70 	movq	112(%rsp), %rsi
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     d65:	c5 ab 58 c0 	vaddsd	%xmm0, %xmm10, %xmm0
     d69:	c4 41 29 15 d2 	vunpckhpd	%xmm10, %xmm10, %xmm10
; result[jj*ny+ii] = sum;
     d6e:	41 8d 14 3a 	leal	(%r10,%rdi), %edx
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     d72:	c5 ab 58 c0 	vaddsd	%xmm0, %xmm10, %xmm0
; result[jj*ny+ii] = sum;
     d76:	48 63 d2 	movslq	%edx, %rdx
     d79:	c5 d8 57 e4 	vxorps	%xmm4, %xmm4, %xmm4
     d7d:	c5 db 5a e0 	vcvtsd2ss	%xmm0, %xmm4, %xmm4
     d81:	c5 fa 11 24 96 	vmovss	%xmm4, (%rsi,%rdx,4)
     d86:	e9 0e fd ff ff 	jmp	-754 <__Z9correlateiiPKfPf._omp_fn.3+0x3a9>
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     d8b:	c5 e9 57 d2 	vxorpd	%xmm2, %xmm2, %xmm2
     d8f:	c5 b3 58 ca 	vaddsd	%xmm2, %xmm9, %xmm1
     d93:	c4 c1 31 15 c1 	vunpckhpd	%xmm9, %xmm9, %xmm0
     d98:	c4 43 7d 19 c9 01 	vextractf128	$1, %ymm9, %xmm9
     d9e:	c5 fb 58 c1 	vaddsd	%xmm1, %xmm0, %xmm0
     da2:	8b 4c 24 40 	movl	64(%rsp), %ecx
; result[jj*ny+ii] = sum;
     da6:	48 8b 7c 24 70 	movq	112(%rsp), %rdi
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     dab:	c5 b3 58 c0 	vaddsd	%xmm0, %xmm9, %xmm0
     daf:	c4 41 31 15 c9 	vunpckhpd	%xmm9, %xmm9, %xmm9
; result[jj*ny+ii] = sum;
     db4:	41 8d 14 08 	leal	(%r8,%rcx), %edx
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     db8:	c5 b3 58 c0 	vaddsd	%xmm0, %xmm9, %xmm0
; result[jj*ny+ii] = sum;
     dbc:	48 63 d2 	movslq	%edx, %rdx
     dbf:	c5 e0 57 db 	vxorps	%xmm3, %xmm3, %xmm3
     dc3:	c5 e3 5a d8 	vcvtsd2ss	%xmm0, %xmm3, %xmm3
     dc7:	c5 fa 11 1c 97 	vmovss	%xmm3, (%rdi,%rdx,4)
     dcc:	e9 e6 fc ff ff 	jmp	-794 <__Z9correlateiiPKfPf._omp_fn.3+0x3c7>
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     dd1:	c5 d9 57 e4 	vxorpd	%xmm4, %xmm4, %xmm4
     dd5:	c5 bb 58 cc 	vaddsd	%xmm4, %xmm8, %xmm1
     dd9:	c4 c1 39 15 c0 	vunpckhpd	%xmm8, %xmm8, %xmm0
     dde:	c4 43 7d 19 c0 01 	vextractf128	$1, %ymm8, %xmm8
     de4:	c5 fb 58 c1 	vaddsd	%xmm1, %xmm0, %xmm0
     de8:	8b 74 24 40 	movl	64(%rsp), %esi
; result[jj*ny+ii] = sum;
     dec:	48 8b 4c 24 70 	movq	112(%rsp), %rcx
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     df1:	c5 bb 58 c0 	vaddsd	%xmm0, %xmm8, %xmm0
     df5:	c4 41 39 15 c0 	vunpckhpd	%xmm8, %xmm8, %xmm8
; result[jj*ny+ii] = sum;
     dfa:	41 8d 14 31 	leal	(%r9,%rsi), %edx
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     dfe:	c5 bb 58 c0 	vaddsd	%xmm0, %xmm8, %xmm0
; result[jj*ny+ii] = sum;
     e02:	48 63 d2 	movslq	%edx, %rdx
     e05:	c5 e8 57 d2 	vxorps	%xmm2, %xmm2, %xmm2
     e09:	c5 eb 5a d0 	vcvtsd2ss	%xmm0, %xmm2, %xmm2
     e0d:	c5 fa 11 14 91 	vmovss	%xmm2, (%rcx,%rdx,4)
     e12:	e9 be fc ff ff 	jmp	-834 <__Z9correlateiiPKfPf._omp_fn.3+0x3e5>
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     e17:	c5 f1 57 c9 	vxorpd	%xmm1, %xmm1, %xmm1
     e1b:	c5 f3 58 cf 	vaddsd	%xmm7, %xmm1, %xmm1
     e1f:	c5 c1 15 c7 	vunpckhpd	%xmm7, %xmm7, %xmm0
     e23:	c4 e3 7d 19 ff 01 	vextractf128	$1, %ymm7, %xmm7
     e29:	c5 fb 58 c1 	vaddsd	%xmm1, %xmm0, %xmm0
     e2d:	8b 44 24 40 	movl	64(%rsp), %eax
; result[jj*ny+ii] = sum;
     e31:	48 8b 7c 24 70 	movq	112(%rsp), %rdi
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     e36:	c5 c3 58 c0 	vaddsd	%xmm0, %xmm7, %xmm0
     e3a:	c5 c1 15 ff 	vunpckhpd	%xmm7, %xmm7, %xmm7
; result[jj*ny+ii] = sum;
     e3e:	44 01 d0 	addl	%r10d, %eax
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     e41:	c5 c3 58 c0 	vaddsd	%xmm0, %xmm7, %xmm0
; result[jj*ny+ii] = sum;
     e45:	48 98 	cltq
     e47:	c5 c0 57 ff 	vxorps	%xmm7, %xmm7, %xmm7
     e4b:	c5 c3 5a f8 	vcvtsd2ss	%xmm0, %xmm7, %xmm7
     e4f:	c5 fa 11 3c 87 	vmovss	%xmm7, (%rdi,%rax,4)
     e54:	e9 99 fc ff ff 	jmp	-871 <__Z9correlateiiPKfPf._omp_fn.3+0x402>
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     e59:	c5 fd 28 bc 24 80 00 00 00 	vmovapd	128(%rsp), %ymm7
     e62:	c5 f1 57 c9 	vxorpd	%xmm1, %xmm1, %xmm1
     e66:	c5 f3 58 cf 	vaddsd	%xmm7, %xmm1, %xmm1
     e6a:	c5 c1 15 c7 	vunpckhpd	%xmm7, %xmm7, %xmm0
; result[jj*ny+ii] = sum;
     e6e:	8b 44 24 58 	movl	88(%rsp), %eax
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     e72:	c5 fb 58 c9 	vaddsd	%xmm1, %xmm0, %xmm1
     e76:	c4 e3 7d 19 f8 01 	vextractf128	$1, %ymm7, %xmm0
; result[jj*ny+ii] = sum;
     e7c:	44 01 c0 	addl	%r8d, %eax
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     e7f:	c5 fb 58 c9 	vaddsd	%xmm1, %xmm0, %xmm1
     e83:	c5 f9 15 c0 	vunpckhpd	%xmm0, %xmm0, %xmm0
; result[jj*ny+ii] = sum;
     e87:	48 8b 74 24 70 	movq	112(%rsp), %rsi
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     e8c:	c5 fb 58 c1 	vaddsd	%xmm1, %xmm0, %xmm0
; result[jj*ny+ii] = sum;
     e90:	48 98 	cltq
     e92:	c5 c0 57 ff 	vxorps	%xmm7, %xmm7, %xmm7
     e96:	c5 c3 5a f8 	vcvtsd2ss	%xmm0, %xmm7, %xmm7
     e9a:	c5 fa 11 3c 86 	vmovss	%xmm7, (%rsi,%rax,4)
     e9f:	e9 6c fc ff ff 	jmp	-916 <__Z9correlateiiPKfPf._omp_fn.3+0x420>
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     ea4:	c5 f1 57 c9 	vxorpd	%xmm1, %xmm1, %xmm1
     ea8:	c5 f3 58 ce 	vaddsd	%xmm6, %xmm1, %xmm1
     eac:	c5 c9 15 c6 	vunpckhpd	%xmm6, %xmm6, %xmm0
     eb0:	c4 e3 7d 19 f6 01 	vextractf128	$1, %ymm6, %xmm6
     eb6:	c5 fb 58 c1 	vaddsd	%xmm1, %xmm0, %xmm0
     eba:	8b 44 24 58 	movl	88(%rsp), %eax
; result[jj*ny+ii] = sum;
     ebe:	48 8b 4c 24 70 	movq	112(%rsp), %rcx
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     ec3:	c5 cb 58 c0 	vaddsd	%xmm0, %xmm6, %xmm0
     ec7:	c5 c9 15 f6 	vunpckhpd	%xmm6, %xmm6, %xmm6
; result[jj*ny+ii] = sum;
     ecb:	44 01 c8 	addl	%r9d, %eax
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     ece:	c5 cb 58 c0 	vaddsd	%xmm0, %xmm6, %xmm0
; result[jj*ny+ii] = sum;
     ed2:	48 98 	cltq
     ed4:	c5 c8 57 f6 	vxorps	%xmm6, %xmm6, %xmm6
     ed8:	c5 cb 5a f0 	vcvtsd2ss	%xmm0, %xmm6, %xmm6
     edc:	c5 fa 11 34 81 	vmovss	%xmm6, (%rcx,%rax,4)
     ee1:	e9 48 fc ff ff 	jmp	-952 <__Z9correlateiiPKfPf._omp_fn.3+0x43e>
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     ee6:	c5 f1 57 c9 	vxorpd	%xmm1, %xmm1, %xmm1
     eea:	c5 f3 58 cd 	vaddsd	%xmm5, %xmm1, %xmm1
     eee:	c5 d1 15 c5 	vunpckhpd	%xmm5, %xmm5, %xmm0
     ef2:	c4 e3 7d 19 ed 01 	vextractf128	$1, %ymm5, %xmm5
     ef8:	c5 fb 58 c1 	vaddsd	%xmm1, %xmm0, %xmm0
     efc:	8b 44 24 58 	movl	88(%rsp), %eax
; result[jj*ny+ii] = sum;
     f00:	48 8b 7c 24 70 	movq	112(%rsp), %rdi
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     f05:	c5 d3 58 c0 	vaddsd	%xmm0, %xmm5, %xmm0
     f09:	c5 d1 15 ed 	vunpckhpd	%xmm5, %xmm5, %xmm5
; result[jj*ny+ii] = sum;
     f0d:	44 01 d0 	addl	%r10d, %eax
; for (int kk = 0; kk < 4; kk++) sum += block[id][jd][kk];
     f10:	c5 d3 58 c0 	vaddsd	%xmm0, %xmm5, %xmm0
; result[jj*ny+ii] = sum;
     f14:	48 98 	cltq
     f16:	c5 d0 57 ed 	vxorps	%xmm5, %xmm5, %xmm5
     f1a:	c5 d3 5a e8 	vcvtsd2ss	%xmm0, %xmm5, %xmm5
     f1e:	c5 fa 11 2c 87 	vmovss	%xmm5, (%rdi,%rax,4)
; asm("#bar");
     f23:	e9 24 fc ff ff 	jmp	-988 <__Z9correlateiiPKfPf._omp_fn.3+0x45c>
; block[id][jd] = double4_0;
     f28:	c5 d1 57 ed 	vxorpd	%xmm5, %xmm5, %xmm5
     f2c:	c5 fd 28 fd 	vmovapd	%ymm5, %ymm7
     f30:	c5 7d 28 d5 	vmovapd	%ymm5, %ymm10
     f34:	c5 7d 28 ed 	vmovapd	%ymm5, %ymm13
     f38:	c5 fd 28 f5 	vmovapd	%ymm5, %ymm6
     f3c:	c5 7d 28 c5 	vmovapd	%ymm5, %ymm8
     f40:	c5 7d 28 dd 	vmovapd	%ymm5, %ymm11
     f44:	c5 7d 28 f5 	vmovapd	%ymm5, %ymm14
     f48:	c5 fd 29 ac 24 80 00 00 00 	vmovapd	%ymm5, 128(%rsp)
     f51:	c5 7d 28 cd 	vmovapd	%ymm5, %ymm9
     f55:	c5 7d 28 e5 	vmovapd	%ymm5, %ymm12
     f59:	c5 7d 28 fd 	vmovapd	%ymm5, %ymm15
     f5d:	e9 84 fa ff ff 	jmp	-1404 <__Z9correlateiiPKfPf._omp_fn.3+0x2f6>
     f62:	66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
     f6c:	0f 1f 40 00 	nopl	(%rax)

__Z10preprocessPKfiiiii:
; const int nb, const int na, const int ncd) {
     f70:	41 57 	pushq	%r15
     f72:	41 89 d7 	movl	%edx, %r15d
; double4_t* data = double4_alloc(ncd*na);
     f75:	44 89 ca 	movl	%r9d, %edx
; const int nb, const int na, const int ncd) {
     f78:	41 56 	pushq	%r14
; double4_t* data = double4_alloc(ncd*na);
     f7a:	41 0f af d0 	imull	%r8d, %edx
; const int nb, const int na, const int ncd) {
     f7e:	41 89 ce 	movl	%ecx, %r14d
     f81:	41 55 	pushq	%r13
; double4_t* data = double4_alloc(ncd*na);
     f83:	48 63 d2 	movslq	%edx, %rdx
; return static_cast<double4_t*>(aligned_malloc(sizeof(double4_t) * n));
     f86:	48 c1 e2 05 	shlq	$5, %rdx
; const int nb, const int na, const int ncd) {
     f8a:	41 54 	pushq	%r12
     f8c:	41 89 f5 	movl	%esi, %r13d
; if (posix_memalign(&ret, 32, bytes)) {
     f8f:	be 20 00 00 00 	movl	$32, %esi
; const int nb, const int na, const int ncd) {
     f94:	55 	pushq	%rbp
     f95:	44 89 c5 	movl	%r8d, %ebp
     f98:	53 	pushq	%rbx
     f99:	48 83 ec 38 	subq	$56, %rsp
; if (posix_memalign(&ret, 32, bytes)) {
     f9d:	48 8d 5c 24 10 	leaq	16(%rsp), %rbx
; const int nb, const int na, const int ncd) {
     fa2:	48 89 7c 24 08 	movq	%rdi, 8(%rsp)
; if (posix_memalign(&ret, 32, bytes)) {
     fa7:	48 89 df 	movq	%rbx, %rdi
; double4_t* data = double4_alloc(ncd*na);
     faa:	44 89 4c 24 04 	movl	%r9d, 4(%rsp)
; void* ret = nullptr;
     faf:	48 c7 44 24 10 00 00 00 00 	movq	$0, 16(%rsp)
; if (posix_memalign(&ret, 32, bytes)) {
     fb8:	e8 00 00 00 00 	callq	0 <__Z10preprocessPKfiiiii+0x4d>
     fbd:	85 c0 	testl	%eax, %eax
     fbf:	44 8b 4c 24 04 	movl	4(%rsp), %r9d
     fc4:	4c 8b 54 24 08 	movq	8(%rsp), %r10
     fc9:	0f 85 b1 00 00 00 	jne	177 <__Z10preprocessPKfiiiii+0x110>
; return ret;
     fcf:	4c 8b 64 24 10 	movq	16(%rsp), %r12
     fd4:	48 89 de 	movq	%rbx, %rsi
     fd7:	31 c9 	xorl	%ecx, %ecx
     fd9:	31 d2 	xorl	%edx, %edx
     fdb:	48 8d 3d 00 00 00 00 	leaq	(%rip), %rdi
; #pragma omp parallel for
     fe2:	4c 89 54 24 10 	movq	%r10, 16(%rsp)
     fe7:	44 89 4c 24 04 	movl	%r9d, 4(%rsp)
     fec:	4c 89 64 24 18 	movq	%r12, 24(%rsp)
     ff1:	89 6c 24 2c 	movl	%ebp, 44(%rsp)
     ff5:	44 89 74 24 28 	movl	%r14d, 40(%rsp)
     ffa:	44 89 7c 24 24 	movl	%r15d, 36(%rsp)
     fff:	44 89 6c 24 20 	movl	%r13d, 32(%rsp)
    1004:	e8 00 00 00 00 	callq	0 <__Z10preprocessPKfiiiii+0x99>
; #pragma omp parallel for
    1009:	44 8b 4c 24 04 	movl	4(%rsp), %r9d
    100e:	48 89 de 	movq	%rbx, %rsi
    1011:	31 c9 	xorl	%ecx, %ecx
    1013:	31 d2 	xorl	%edx, %edx
    1015:	48 8d 3d 00 00 00 00 	leaq	(%rip), %rdi
    101c:	4c 89 64 24 10 	movq	%r12, 16(%rsp)
    1021:	44 89 4c 24 24 	movl	%r9d, 36(%rsp)
    1026:	89 6c 24 20 	movl	%ebp, 32(%rsp)
    102a:	44 89 74 24 1c 	movl	%r14d, 28(%rsp)
    102f:	44 89 6c 24 18 	movl	%r13d, 24(%rsp)
    1034:	e8 00 00 00 00 	callq	0 <__Z10preprocessPKfiiiii+0xc9>
; #pragma omp parallel for
    1039:	48 89 de 	movq	%rbx, %rsi
    103c:	31 c9 	xorl	%ecx, %ecx
    103e:	31 d2 	xorl	%edx, %edx
    1040:	48 8d 3d 00 00 00 00 	leaq	(%rip), %rdi
    1047:	4c 89 64 24 10 	movq	%r12, 16(%rsp)
    104c:	89 6c 24 24 	movl	%ebp, 36(%rsp)
    1050:	44 89 74 24 20 	movl	%r14d, 32(%rsp)
    1055:	44 89 7c 24 1c 	movl	%r15d, 28(%rsp)
    105a:	44 89 6c 24 18 	movl	%r13d, 24(%rsp)
    105f:	e8 00 00 00 00 	callq	0 <__Z10preprocessPKfiiiii+0xf4>
; return data;
    1064:	48 83 c4 38 	addq	$56, %rsp
; }
    1068:	5b 	popq	%rbx
    1069:	5d 	popq	%rbp
    106a:	4c 89 e0 	movq	%r12, %rax
    106d:	41 5c 	popq	%r12
    106f:	41 5d 	popq	%r13
    1071:	41 5e 	popq	%r14
    1073:	41 5f 	popq	%r15
    1075:	c3 	retq
    1076:	66 2e 0f 1f 84 00 00 00 00 00 	nopw	%cs:(%rax,%rax)
; return nullptr;
    1080:	45 31 e4 	xorl	%r12d, %r12d
    1083:	e9 4c ff ff ff 	jmp	-180 <__Z10preprocessPKfiiiii+0x64>
    1088:	0f 1f 84 00 00 00 00 00 	nopl	(%rax,%rax)

__Z9correlateiiPKfPf:
; void correlate(int ny, int nx, const float* data_, float* result) {
    1090:	41 56 	pushq	%r14
; const int na = (nx + nb - 1) / nb;
    1092:	89 f0 	movl	%esi, %eax
; void correlate(int ny, int nx, const float* data_, float* result) {
    1094:	41 55 	pushq	%r13
    1096:	49 89 cd 	movq	%rcx, %r13
    1099:	41 54 	pushq	%r12
; const int na = (nx + nb - 1) / nb;
    109b:	44 8d 66 06 	leal	6(%rsi), %r12d
; void correlate(int ny, int nx, const float* data_, float* result) {
    109f:	55 	pushq	%rbp
    10a0:	89 fd 	movl	%edi, %ebp
; if (n%a==0 && n%b==0) return n; else n++;
    10a2:	89 e9 	movl	%ebp, %ecx
; void correlate(int ny, int nx, const float* data_, float* result) {
    10a4:	53 	pushq	%rbx
    10a5:	48 89 d7 	movq	%rdx, %rdi
; if (n%a==0 && n%b==0) return n; else n++;
    10a8:	ba 56 55 55 55 	movl	$1431655766, %edx
; void correlate(int ny, int nx, const float* data_, float* result) {
    10ad:	48 83 ec 20 	subq	$32, %rsp
; const int na = (nx + nb - 1) / nb;
    10b1:	83 c0 03 	addl	$3, %eax
    10b4:	44 0f 49 e0 	cmovnsl	%eax, %r12d
; if (n%a==0 && n%b==0) return n; else n++;
    10b8:	c1 f9 1f 	sarl	$31, %ecx
    10bb:	89 c8 	movl	%ecx, %eax
    10bd:	c1 e8 1e 	shrl	$30, %eax
    10c0:	44 8d 44 05 00 	leal	(%rbp,%rax), %r8d
    10c5:	41 83 e0 03 	andl	$3, %r8d
    10c9:	41 29 c0 	subl	%eax, %r8d
    10cc:	89 e8 	movl	%ebp, %eax
    10ce:	f7 ea 	imull	%edx
; const int na = (nx + nb - 1) / nb;
    10d0:	41 c1 fc 02 	sarl	$2, %r12d
; const int ncd = div(ny, V, H);
    10d4:	89 eb 	movl	%ebp, %ebx
; if (n%a==0 && n%b==0) return n; else n++;
    10d6:	29 ca 	subl	%ecx, %edx
    10d8:	8d 04 52 	leal	(%rdx,%rdx,2), %eax
    10db:	89 e9 	movl	%ebp, %ecx
    10dd:	29 c1 	subl	%eax, %ecx
    10df:	41 09 c8 	orl	%ecx, %r8d
    10e2:	b9 56 55 55 55 	movl	$1431655766, %ecx
    10e7:	74 2f 	je	47 <__Z9correlateiiPKfPf+0x88>
    10e9:	0f 1f 80 00 00 00 00 	nopl	(%rax)
    10f0:	ff c3 	incl	%ebx
; while (true) {
    10f2:	89 d8 	movl	%ebx, %eax
; if (n%a==0 && n%b==0) return n; else n++;
    10f4:	f7 e9 	imull	%ecx
    10f6:	89 d8 	movl	%ebx, %eax
    10f8:	c1 f8 1f 	sarl	$31, %eax
    10fb:	29 c2 	subl	%eax, %edx
    10fd:	8d 14 52 	leal	(%rdx,%rdx,2), %edx
    1100:	c1 e8 1e 	shrl	$30, %eax
    1103:	41 89 d8 	movl	%ebx, %r8d
    1106:	41 29 d0 	subl	%edx, %r8d
    1109:	89 c2 	movl	%eax, %edx
    110b:	8d 04 03 	leal	(%rbx,%rax), %eax
    110e:	83 e0 03 	andl	$3, %eax
    1111:	29 d0 	subl	%edx, %eax
    1113:	41 09 c0 	orl	%eax, %r8d
    1116:	75 d8 	jne	-40 <__Z9correlateiiPKfPf+0x60>
    1118:	41 89 d9 	movl	%ebx, %r9d
; double4_t* data = preprocess(data_, ny, nx, nb, na, ncd);
    111b:	45 89 e0 	movl	%r12d, %r8d
    111e:	89 f2 	movl	%esi, %edx
    1120:	b9 04 00 00 00 	movl	$4, %ecx
    1125:	89 ee 	movl	%ebp, %esi
    1127:	e8 00 00 00 00 	callq	0 <__Z9correlateiiPKfPf+0x9c>
    112c:	49 89 c6 	movq	%rax, %r14
; #pragma omp parallel for schedule(dynamic,1)
    112f:	85 db 	testl	%ebx, %ebx
    1131:	48 89 44 24 08 	movq	%rax, 8(%rsp)
; const int ncH = ncd / H;
    1136:	8d 43 03 	leal	3(%rbx), %eax
    1139:	0f 49 c3 	cmovnsl	%ebx, %eax
; const int ncV = ncd / V;
    113c:	ba 56 55 55 55 	movl	$1431655766, %edx
; const int ncH = ncd / H;
    1141:	c1 f8 02 	sarl	$2, %eax
; #pragma omp parallel for schedule(dynamic,1)
    1144:	89 44 24 1c 	movl	%eax, 28(%rsp)
; const int ncV = ncd / V;
    1148:	89 d8 	movl	%ebx, %eax
    114a:	f7 ea 	imull	%edx
    114c:	c1 fb 1f 	sarl	$31, %ebx
    114f:	48 89 e6 	movq	%rsp, %rsi
    1152:	29 da 	subl	%ebx, %edx
    1154:	89 54 24 18 	movl	%edx, 24(%rsp)
    1158:	31 c9 	xorl	%ecx, %ecx
    115a:	31 d2 	xorl	%edx, %edx
    115c:	48 8d 3d 00 00 00 00 	leaq	(%rip), %rdi
; #pragma omp parallel for schedule(dynamic,1)
    1163:	44 89 64 24 14 	movl	%r12d, 20(%rsp)
    1168:	4c 89 2c 24 	movq	%r13, (%rsp)
    116c:	89 6c 24 10 	movl	%ebp, 16(%rsp)
    1170:	e8 00 00 00 00 	callq	0 <__Z9correlateiiPKfPf+0xe5>
; free(data);
    1175:	4c 89 f7 	movq	%r14, %rdi
    1178:	e8 00 00 00 00 	callq	0 <__Z9correlateiiPKfPf+0xed>
; }
    117d:	48 83 c4 20 	addq	$32, %rsp
    1181:	5b 	popq	%rbx
    1182:	5d 	popq	%rbp
    1183:	41 5c 	popq	%r12
    1185:	41 5d 	popq	%r13
    1187:	41 5e 	popq	%r14
    1189:	c3 	retq
Disassembly of section __TEXT,__text_startup:
__GLOBAL__sub_I_cp.cc:
    1190:	48 83 ec 08 	subq	$8, %rsp
; static ios_base::Init __ioinit;
    1194:	48 8d 3d 00 00 00 00 	leaq	(%rip), %rdi
    119b:	e8 00 00 00 00 	callq	0 <__GLOBAL__sub_I_cp.cc+0x10>
    11a0:	48 8b 3d 00 00 00 00 	movq	(%rip), %rdi
    11a7:	48 8d 15 00 00 00 00 	leaq	(%rip), %rdx
    11ae:	48 8d 35 00 00 00 00 	leaq	(%rip), %rsi
; }
    11b5:	48 83 c4 08 	addq	$8, %rsp
; static ios_base::Init __ioinit;
    11b9:	e9 00 00 00 00 	jmp	0 <__GLOBAL__sub_I_cp.cc+0x2e>
